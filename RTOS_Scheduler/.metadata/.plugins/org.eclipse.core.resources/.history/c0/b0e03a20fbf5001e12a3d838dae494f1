#include "TIMER0_config.h"
#include "TIMER0_interface.h"
#include"TIMER0_private.h"
#include "std_types.h"
#include <avr/io.h>

static volatile void(*CallBack_Ptr)=NULL_PTR;

void TIMER0_Init(void)
{  /*initialize of timer0 to work in CTC mode */
	TCCR0|=(1<<FOC0)|(1<<WGM01);
	/*masking*/
	TCCR0&=(1<<F8);
	/* set pre_scaler*/
	TCCR0|=TIMER0_PreScaller;
	/* set compare value*/
	OCR0|=TIMER0_compareValue;
	/* interrupt enable for timer0 */
	TIMSK|=(1<<OCIE0);

}


uint8 TIMER0_compMatchSetCallBack(void(*PvCallBackFunc)(void))
{
	uint8 LocalErrorState;
/*Check if pointer point to address */
	if(PvCallBackFunc !=NULL_PTR)
	{
		/* if  point save it  in global pointer */

		CallBack_Ptr=PvCallBackFunc;
	}
	else
	{
		/* if not  point return error state */

		LocalErrorState=NULL_PTR;
	}
	return LocalErrorState;

}


/*Timer0 ISR*/


void  __Vector_10 (void)   __attribute__((signal));
void  __Vector_10 (void)
{
if(CallBack_Ptr !=NULL_PTR)
{

	CallBack_Ptr();
}
else
{
	}
}

