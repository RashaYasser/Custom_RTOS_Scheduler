/*
 ============================================================================
 Module      : RTOS driver
 Name        : RTOS_program.c
 Layer       : RTOS_Stack
 Author      : RASHA_YASSER
 Description : RTOS program
 Date        : 7/4/2023
 ============================================================================
 */

/*LIB*/
#include"STD_TYPES.h"
/*MCAL*/
#include"TIMER0_interface.h"
#include"GIE_interface.h"
/*RTOS Stack*/
#include"RTOS_interface.h"
#include"RTOS_config.h"
#include"RTOS_private.h"
/*create array of TCB struct and initialize it to handle in case user create task and didn't use it*/
TCB RtosTasks[MAX_NUM_OF_TASKS]={{NULL}};
/*initialize system */
void RTOS_voidStart()
{
    TIMER0_compMatchSetCallBack(&voidScheduler);/*set scheduler to run in ISR*/
    GIE_voidEnable();/*global interrupt enable*/
    TIMER0_voidInit();/*initialize timer0 */
}

void RTOS_voidCreateTask(u8 Copy_u8Priority,u32 Copy_u8Priodicity,u32 Copy_u8FirstDelay,void (*Copy_voidPvTaskF)(void))
{
	u8 Local_u8ReturnedState=OK;
	      /*check on priority if less than max no.of task assign this task in TCB*/
		if(Copy_u8Priority < MAX_NUM_OF_TASKS)
		{
			/*Set Task periodicity*/
			RtosTasks[Copy_u8Priority].periodicity=Copy_u8Priodicity;
			/*Set first delay of this task*/
			RtosTasks[Copy_u8Priority].first_delay=Copy_u8FirstDelay;
			/*Set the pointer of the task*/
			RtosTasks[Copy_u8Priority].PvTaskFunc=Copy_voidPvTaskF;
		}
		/*if priority greater than max no.of task return */
	    else
	    {
		    Local_u8ReturnedState=NOT_OK;
	    }
	    return Local_u8ReturnedState;

}
static void voidScheduler()
{
}
