
RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000033a4  00003438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  00800072  00800072  0000344a  2**0
                  ALLOC
  3 .stab         00002f7c  00000000  00000000  0000344c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001478  00000000  00000000  000063c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000079a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ac75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000bbf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000bd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c03a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__vector_1>
       8:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__vector_2>
       c:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_10>
      2c:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b2 10 	call	0x2164	; 0x2164 <main>
      8a:	0c 94 d0 19 	jmp	0x33a0	; 0x33a0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 19 	jmp	0x3338	; 0x3338 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 19 	jmp	0x3370	; 0x3370 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 19 	jmp	0x3338	; 0x3338 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 19 	jmp	0x3370	; 0x3370 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e6       	ldi	r22, 0x67	; 103
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9c 19 	jmp	0x3338	; 0x3338 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b8 19 	jmp	0x3370	; 0x3370 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9c 19 	jmp	0x3338	; 0x3338 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b8 19 	jmp	0x3370	; 0x3370 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9c 19 	jmp	0x3338	; 0x3338 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b8 19 	jmp	0x3370	; 0x3370 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 bc 19 	jmp	0x3378	; 0x3378 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <EXTINT_voidEnable>:
//Global Pointer to function

static void (*EXTINT_ApfuncEXTINT[3])(void);

void EXTINT_voidEnable(u8 Copy_u8ExtIntNum , u8 Copy_u8EdgeIntSource)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2a 97       	sbiw	r28, 0x0a	; 10
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8ExtIntNum)
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	3a 87       	std	Y+10, r19	; 0x0a
     cbe:	29 87       	std	Y+9, r18	; 0x09
     cc0:	89 85       	ldd	r24, Y+9	; 0x09
     cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	91 05       	cpc	r25, r1
     cc8:	09 f4       	brne	.+2      	; 0xccc <EXTINT_voidEnable+0x2e>
     cca:	6f c0       	rjmp	.+222    	; 0xdaa <EXTINT_voidEnable+0x10c>
     ccc:	29 85       	ldd	r18, Y+9	; 0x09
     cce:	3a 85       	ldd	r19, Y+10	; 0x0a
     cd0:	23 30       	cpi	r18, 0x03	; 3
     cd2:	31 05       	cpc	r19, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <EXTINT_voidEnable+0x3a>
     cd6:	cc c0       	rjmp	.+408    	; 0xe70 <EXTINT_voidEnable+0x1d2>
     cd8:	89 85       	ldd	r24, Y+9	; 0x09
     cda:	9a 85       	ldd	r25, Y+10	; 0x0a
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	91 05       	cpc	r25, r1
     ce0:	09 f0       	breq	.+2      	; 0xce4 <EXTINT_voidEnable+0x46>
     ce2:	ec c0       	rjmp	.+472    	; 0xebc <EXTINT_voidEnable+0x21e>
	{
	case EXTINT_INT0:
		switch(Copy_u8EdgeIntSource)
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	38 87       	std	Y+8, r19	; 0x08
     cec:	2f 83       	std	Y+7, r18	; 0x07
     cee:	8f 81       	ldd	r24, Y+7	; 0x07
     cf0:	98 85       	ldd	r25, Y+8	; 0x08
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	91 05       	cpc	r25, r1
     cf6:	a1 f1       	breq	.+104    	; 0xd60 <EXTINT_voidEnable+0xc2>
     cf8:	2f 81       	ldd	r18, Y+7	; 0x07
     cfa:	38 85       	ldd	r19, Y+8	; 0x08
     cfc:	23 30       	cpi	r18, 0x03	; 3
     cfe:	31 05       	cpc	r19, r1
     d00:	34 f4       	brge	.+12     	; 0xd0e <EXTINT_voidEnable+0x70>
     d02:	8f 81       	ldd	r24, Y+7	; 0x07
     d04:	98 85       	ldd	r25, Y+8	; 0x08
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	91 05       	cpc	r25, r1
     d0a:	d9 f0       	breq	.+54     	; 0xd42 <EXTINT_voidEnable+0xa4>
     d0c:	46 c0       	rjmp	.+140    	; 0xd9a <EXTINT_voidEnable+0xfc>
     d0e:	2f 81       	ldd	r18, Y+7	; 0x07
     d10:	38 85       	ldd	r19, Y+8	; 0x08
     d12:	23 30       	cpi	r18, 0x03	; 3
     d14:	31 05       	cpc	r19, r1
     d16:	31 f0       	breq	.+12     	; 0xd24 <EXTINT_voidEnable+0x86>
     d18:	8f 81       	ldd	r24, Y+7	; 0x07
     d1a:	98 85       	ldd	r25, Y+8	; 0x08
     d1c:	84 30       	cpi	r24, 0x04	; 4
     d1e:	91 05       	cpc	r25, r1
     d20:	71 f1       	breq	.+92     	; 0xd7e <EXTINT_voidEnable+0xe0>
     d22:	3b c0       	rjmp	.+118    	; 0xd9a <EXTINT_voidEnable+0xfc>
		{
		case EXTINT_ANY_LOGICAL_CHANGE:
			CLEAR_BIT(MCUCR,MCUCR_ISC01);
     d24:	a5 e5       	ldi	r26, 0x55	; 85
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e5 e5       	ldi	r30, 0x55	; 85
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8d 7f       	andi	r24, 0xFD	; 253
     d30:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC00);
     d32:	a5 e5       	ldi	r26, 0x55	; 85
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e5 e5       	ldi	r30, 0x55	; 85
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	81 60       	ori	r24, 0x01	; 1
     d3e:	8c 93       	st	X, r24
     d40:	2c c0       	rjmp	.+88     	; 0xd9a <EXTINT_voidEnable+0xfc>
			break;
		case EXTINT_FALLING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC01);
     d42:	a5 e5       	ldi	r26, 0x55	; 85
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e5 e5       	ldi	r30, 0x55	; 85
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	82 60       	ori	r24, 0x02	; 2
     d4e:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC00);
     d50:	a5 e5       	ldi	r26, 0x55	; 85
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e5 e5       	ldi	r30, 0x55	; 85
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8e 7f       	andi	r24, 0xFE	; 254
     d5c:	8c 93       	st	X, r24
     d5e:	1d c0       	rjmp	.+58     	; 0xd9a <EXTINT_voidEnable+0xfc>
			break;
		case EXTINT_RAISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC01);
     d60:	a5 e5       	ldi	r26, 0x55	; 85
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e5 e5       	ldi	r30, 0x55	; 85
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	82 60       	ori	r24, 0x02	; 2
     d6c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC00);
     d6e:	a5 e5       	ldi	r26, 0x55	; 85
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e5 e5       	ldi	r30, 0x55	; 85
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	81 60       	ori	r24, 0x01	; 1
     d7a:	8c 93       	st	X, r24
     d7c:	0e c0       	rjmp	.+28     	; 0xd9a <EXTINT_voidEnable+0xfc>
			break;
		case EXTINT_LOW_LEVEL:
			CLEAR_BIT(MCUCR,MCUCR_ISC01);
     d7e:	a5 e5       	ldi	r26, 0x55	; 85
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e5 e5       	ldi	r30, 0x55	; 85
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8d 7f       	andi	r24, 0xFD	; 253
     d8a:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC00);
     d8c:	a5 e5       	ldi	r26, 0x55	; 85
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e5 e5       	ldi	r30, 0x55	; 85
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8e 7f       	andi	r24, 0xFE	; 254
     d98:	8c 93       	st	X, r24
			break;
		}
		/* Enable Ext Int 0 */
		SET_BIT(GICR,GICR_INT0);
     d9a:	ab e5       	ldi	r26, 0x5B	; 91
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	eb e5       	ldi	r30, 0x5B	; 91
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	80 64       	ori	r24, 0x40	; 64
     da6:	8c 93       	st	X, r24
     da8:	89 c0       	rjmp	.+274    	; 0xebc <EXTINT_voidEnable+0x21e>
		break;
		case EXTINT_INT1:
			switch(Copy_u8EdgeIntSource)
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	3e 83       	std	Y+6, r19	; 0x06
     db2:	2d 83       	std	Y+5, r18	; 0x05
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	91 05       	cpc	r25, r1
     dbc:	a1 f1       	breq	.+104    	; 0xe26 <EXTINT_voidEnable+0x188>
     dbe:	2d 81       	ldd	r18, Y+5	; 0x05
     dc0:	3e 81       	ldd	r19, Y+6	; 0x06
     dc2:	23 30       	cpi	r18, 0x03	; 3
     dc4:	31 05       	cpc	r19, r1
     dc6:	34 f4       	brge	.+12     	; 0xdd4 <EXTINT_voidEnable+0x136>
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	9e 81       	ldd	r25, Y+6	; 0x06
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	91 05       	cpc	r25, r1
     dd0:	d9 f0       	breq	.+54     	; 0xe08 <EXTINT_voidEnable+0x16a>
     dd2:	46 c0       	rjmp	.+140    	; 0xe60 <EXTINT_voidEnable+0x1c2>
     dd4:	2d 81       	ldd	r18, Y+5	; 0x05
     dd6:	3e 81       	ldd	r19, Y+6	; 0x06
     dd8:	23 30       	cpi	r18, 0x03	; 3
     dda:	31 05       	cpc	r19, r1
     ddc:	31 f0       	breq	.+12     	; 0xdea <EXTINT_voidEnable+0x14c>
     dde:	8d 81       	ldd	r24, Y+5	; 0x05
     de0:	9e 81       	ldd	r25, Y+6	; 0x06
     de2:	84 30       	cpi	r24, 0x04	; 4
     de4:	91 05       	cpc	r25, r1
     de6:	71 f1       	breq	.+92     	; 0xe44 <EXTINT_voidEnable+0x1a6>
     de8:	3b c0       	rjmp	.+118    	; 0xe60 <EXTINT_voidEnable+0x1c2>
			{
			case EXTINT_ANY_LOGICAL_CHANGE:
				CLEAR_BIT(MCUCR,MCUCR_ISC11);
     dea:	a5 e5       	ldi	r26, 0x55	; 85
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e5 e5       	ldi	r30, 0x55	; 85
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	87 7f       	andi	r24, 0xF7	; 247
     df6:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC10);
     df8:	a5 e5       	ldi	r26, 0x55	; 85
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e5 e5       	ldi	r30, 0x55	; 85
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	84 60       	ori	r24, 0x04	; 4
     e04:	8c 93       	st	X, r24
     e06:	2c c0       	rjmp	.+88     	; 0xe60 <EXTINT_voidEnable+0x1c2>

				break;
			case EXTINT_FALLING_EDGE:
				SET_BIT(MCUCR,MCUCR_ISC11);
     e08:	a5 e5       	ldi	r26, 0x55	; 85
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e5 e5       	ldi	r30, 0x55	; 85
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	88 60       	ori	r24, 0x08	; 8
     e14:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,MCUCR_ISC10);
     e16:	a5 e5       	ldi	r26, 0x55	; 85
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e5 e5       	ldi	r30, 0x55	; 85
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	8b 7f       	andi	r24, 0xFB	; 251
     e22:	8c 93       	st	X, r24
     e24:	1d c0       	rjmp	.+58     	; 0xe60 <EXTINT_voidEnable+0x1c2>
				break;
			case EXTINT_RAISING_EDGE:
				SET_BIT(MCUCR,MCUCR_ISC11);
     e26:	a5 e5       	ldi	r26, 0x55	; 85
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e5 e5       	ldi	r30, 0x55	; 85
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	88 60       	ori	r24, 0x08	; 8
     e32:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC10);
     e34:	a5 e5       	ldi	r26, 0x55	; 85
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e5 e5       	ldi	r30, 0x55	; 85
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	84 60       	ori	r24, 0x04	; 4
     e40:	8c 93       	st	X, r24
     e42:	0e c0       	rjmp	.+28     	; 0xe60 <EXTINT_voidEnable+0x1c2>
				break;
			case EXTINT_LOW_LEVEL:
				CLEAR_BIT(MCUCR,MCUCR_ISC11);
     e44:	a5 e5       	ldi	r26, 0x55	; 85
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e5 e5       	ldi	r30, 0x55	; 85
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	87 7f       	andi	r24, 0xF7	; 247
     e50:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,MCUCR_ISC10);
     e52:	a5 e5       	ldi	r26, 0x55	; 85
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e5       	ldi	r30, 0x55	; 85
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8b 7f       	andi	r24, 0xFB	; 251
     e5e:	8c 93       	st	X, r24
				break;
			}
			/* Enable Ext Int 1 */
			SET_BIT(GICR,GICR_INT1);
     e60:	ab e5       	ldi	r26, 0x5B	; 91
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	eb e5       	ldi	r30, 0x5B	; 91
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 68       	ori	r24, 0x80	; 128
     e6c:	8c 93       	st	X, r24
     e6e:	26 c0       	rjmp	.+76     	; 0xebc <EXTINT_voidEnable+0x21e>
			break;
			case EXTINT_INT2:
				switch(Copy_u8EdgeIntSource)
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	3c 83       	std	Y+4, r19	; 0x04
     e78:	2b 83       	std	Y+3, r18	; 0x03
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	91 05       	cpc	r25, r1
     e82:	31 f0       	breq	.+12     	; 0xe90 <EXTINT_voidEnable+0x1f2>
     e84:	2b 81       	ldd	r18, Y+3	; 0x03
     e86:	3c 81       	ldd	r19, Y+4	; 0x04
     e88:	22 30       	cpi	r18, 0x02	; 2
     e8a:	31 05       	cpc	r19, r1
     e8c:	49 f0       	breq	.+18     	; 0xea0 <EXTINT_voidEnable+0x202>
     e8e:	0f c0       	rjmp	.+30     	; 0xeae <EXTINT_voidEnable+0x210>
				{
				case EXTINT_FALLING_EDGE:
					CLEAR_BIT(MCUCSR,MCUCSR_ISC2);
     e90:	a4 e5       	ldi	r26, 0x54	; 84
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e4 e5       	ldi	r30, 0x54	; 84
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8f 7b       	andi	r24, 0xBF	; 191
     e9c:	8c 93       	st	X, r24
     e9e:	07 c0       	rjmp	.+14     	; 0xeae <EXTINT_voidEnable+0x210>
					break;
				case EXTINT_RAISING_EDGE:
					SET_BIT(MCUCSR,MCUCSR_ISC2);
     ea0:	a4 e5       	ldi	r26, 0x54	; 84
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e4 e5       	ldi	r30, 0x54	; 84
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	80 64       	ori	r24, 0x40	; 64
     eac:	8c 93       	st	X, r24
					break;
				}
				/* Enable Ext Int 2 */
				SET_BIT(GICR,GICR_INT2);
     eae:	ab e5       	ldi	r26, 0x5B	; 91
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	eb e5       	ldi	r30, 0x5B	; 91
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 62       	ori	r24, 0x20	; 32
     eba:	8c 93       	st	X, r24
				break;


	}
}
     ebc:	2a 96       	adiw	r28, 0x0a	; 10
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <EXTINT_voidDisable>:

void EXTINT_voidDisable(u8 Copy_u8ExtIntNum)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <EXTINT_voidDisable+0x6>
     ed4:	0f 92       	push	r0
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8ExtIntNum)
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	3b 83       	std	Y+3, r19	; 0x03
     ee4:	2a 83       	std	Y+2, r18	; 0x02
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	82 30       	cpi	r24, 0x02	; 2
     eec:	91 05       	cpc	r25, r1
     eee:	91 f0       	breq	.+36     	; 0xf14 <EXTINT_voidDisable+0x46>
     ef0:	2a 81       	ldd	r18, Y+2	; 0x02
     ef2:	3b 81       	ldd	r19, Y+3	; 0x03
     ef4:	23 30       	cpi	r18, 0x03	; 3
     ef6:	31 05       	cpc	r19, r1
     ef8:	a9 f0       	breq	.+42     	; 0xf24 <EXTINT_voidDisable+0x56>
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	9b 81       	ldd	r25, Y+3	; 0x03
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	91 05       	cpc	r25, r1
     f02:	b9 f4       	brne	.+46     	; 0xf32 <EXTINT_voidDisable+0x64>
	{
	case EXTINT_INT0:
		CLEAR_BIT(GICR,GICR_INT0);
     f04:	ab e5       	ldi	r26, 0x5B	; 91
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	eb e5       	ldi	r30, 0x5B	; 91
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8f 7b       	andi	r24, 0xBF	; 191
     f10:	8c 93       	st	X, r24
     f12:	0f c0       	rjmp	.+30     	; 0xf32 <EXTINT_voidDisable+0x64>
		break;
	case EXTINT_INT1:
		CLEAR_BIT(GICR,GICR_INT1);
     f14:	ab e5       	ldi	r26, 0x5B	; 91
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	eb e5       	ldi	r30, 0x5B	; 91
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8f 77       	andi	r24, 0x7F	; 127
     f20:	8c 93       	st	X, r24
     f22:	07 c0       	rjmp	.+14     	; 0xf32 <EXTINT_voidDisable+0x64>
		break;
	case EXTINT_INT2:
		CLEAR_BIT(GICR,GICR_INT2);
     f24:	ab e5       	ldi	r26, 0x5B	; 91
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	eb e5       	ldi	r30, 0x5B	; 91
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 7d       	andi	r24, 0xDF	; 223
     f30:	8c 93       	st	X, r24
		break;
	}
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <EXTINT_voidSetCallBack>:

void EXTINT_voidSetCallBack(void(*Copy_pfun)(void),u8 Copy_u8ExtIntIndex)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	00 d0       	rcall	.+0      	; 0xf44 <EXTINT_voidSetCallBack+0x6>
     f44:	0f 92       	push	r0
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	6b 83       	std	Y+3, r22	; 0x03
	EXTINT_ApfuncEXTINT[Copy_u8ExtIntIndex] = Copy_pfun;
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	fc 01       	movw	r30, r24
     f5c:	ee 58       	subi	r30, 0x8E	; 142
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24
}
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <__vector_1>:

/* ISR Function for External Interrupt 0 */
void __vector_1(void)  __attribute__((signal));
void __vector_1(void)
{
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	2f 93       	push	r18
     f80:	3f 93       	push	r19
     f82:	4f 93       	push	r20
     f84:	5f 93       	push	r21
     f86:	6f 93       	push	r22
     f88:	7f 93       	push	r23
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	ef 93       	push	r30
     f94:	ff 93       	push	r31
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
	EXTINT_ApfuncEXTINT[EXTINT_INT0]();
     f9e:	e0 91 74 00 	lds	r30, 0x0074
     fa2:	f0 91 75 00 	lds	r31, 0x0075
     fa6:	09 95       	icall
}
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	ff 91       	pop	r31
     fae:	ef 91       	pop	r30
     fb0:	bf 91       	pop	r27
     fb2:	af 91       	pop	r26
     fb4:	9f 91       	pop	r25
     fb6:	8f 91       	pop	r24
     fb8:	7f 91       	pop	r23
     fba:	6f 91       	pop	r22
     fbc:	5f 91       	pop	r21
     fbe:	4f 91       	pop	r20
     fc0:	3f 91       	pop	r19
     fc2:	2f 91       	pop	r18
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0f 90       	pop	r0
     fca:	1f 90       	pop	r1
     fcc:	18 95       	reti

00000fce <__vector_2>:
/* ISR Function for External Interrupt 0 */
void __vector_2(void)  __attribute__((signal));
void __vector_2(void)
{
     fce:	1f 92       	push	r1
     fd0:	0f 92       	push	r0
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	0f 92       	push	r0
     fd6:	11 24       	eor	r1, r1
     fd8:	2f 93       	push	r18
     fda:	3f 93       	push	r19
     fdc:	4f 93       	push	r20
     fde:	5f 93       	push	r21
     fe0:	6f 93       	push	r22
     fe2:	7f 93       	push	r23
     fe4:	8f 93       	push	r24
     fe6:	9f 93       	push	r25
     fe8:	af 93       	push	r26
     fea:	bf 93       	push	r27
     fec:	ef 93       	push	r30
     fee:	ff 93       	push	r31
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
	EXTINT_ApfuncEXTINT[EXTINT_INT1]();
     ff8:	e0 91 76 00 	lds	r30, 0x0076
     ffc:	f0 91 77 00 	lds	r31, 0x0077
    1000:	09 95       	icall
}
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	ff 91       	pop	r31
    1008:	ef 91       	pop	r30
    100a:	bf 91       	pop	r27
    100c:	af 91       	pop	r26
    100e:	9f 91       	pop	r25
    1010:	8f 91       	pop	r24
    1012:	7f 91       	pop	r23
    1014:	6f 91       	pop	r22
    1016:	5f 91       	pop	r21
    1018:	4f 91       	pop	r20
    101a:	3f 91       	pop	r19
    101c:	2f 91       	pop	r18
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <__vector_3>:
/* ISR Function for External Interrupt 0 */
void __vector_3(void)  __attribute__((signal));
void __vector_3(void)
{
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	2f 93       	push	r18
    1034:	3f 93       	push	r19
    1036:	4f 93       	push	r20
    1038:	5f 93       	push	r21
    103a:	6f 93       	push	r22
    103c:	7f 93       	push	r23
    103e:	8f 93       	push	r24
    1040:	9f 93       	push	r25
    1042:	af 93       	push	r26
    1044:	bf 93       	push	r27
    1046:	ef 93       	push	r30
    1048:	ff 93       	push	r31
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
	EXTINT_ApfuncEXTINT[EXTINT_INT2]();
    1052:	e0 91 78 00 	lds	r30, 0x0078
    1056:	f0 91 79 00 	lds	r31, 0x0079
    105a:	09 95       	icall
}
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <GIE_voidEnable>:
#include"BIT_MATH.h"
#include"GIE_interface.h"


void  GIE_voidEnable(void)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , 7 ) ;
    108a:	af e5       	ldi	r26, 0x5F	; 95
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ef e5       	ldi	r30, 0x5F	; 95
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	80 68       	ori	r24, 0x80	; 128
    1096:	8c 93       	st	X, r24
}
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <GIE_voidDisable>:

void  GIE_voidDisable(void){
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG , 7 ) ;
    10a6:	af e5       	ldi	r26, 0x5F	; 95
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	ef e5       	ldi	r30, 0x5F	; 95
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 77       	andi	r24, 0x7F	; 127
    10b2:	8c 93       	st	X, r24
}
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <RTOS_voidStart>:
#include"RTOS_private.h"
/*create array of TCB struct and initialize it to handle in case user create task and didn't use it*/
TCB RtosTasks[MAX_NUM_OF_TASKS]={{0}};
/*initialize system */
void RTOS_voidStart()
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    // Set the scheduler to run in the interrupt service routine(ISR)
    TIMER0_compMatchSetCallBack(&voidScheduler);
    10c2:	80 eb       	ldi	r24, 0xB0	; 176
    10c4:	98 e0       	ldi	r25, 0x08	; 8
    10c6:	0e 94 87 09 	call	0x130e	; 0x130e <TIMER0_compMatchSetCallBack>
    GIE_voidEnable();/*global interrupt enable*/
    10ca:	0e 94 41 08 	call	0x1082	; 0x1082 <GIE_voidEnable>
    TIMER0_voidInit();/*initialize timer0 */
    10ce:	0e 94 60 09 	call	0x12c0	; 0x12c0 <TIMER0_voidInit>
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <RTOS_voidCreateTask>:

u8 RTOS_voidCreateTask(u8 Copy_u8Priority,u32 Copy_u8Priodicity,void (*Copy_voidPvTaskF)(void))
{       /*set priority as the index of array 0 is a highest priority*/
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	28 97       	sbiw	r28, 0x08	; 8
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	8a 83       	std	Y+2, r24	; 0x02
    10ee:	4b 83       	std	Y+3, r20	; 0x03
    10f0:	5c 83       	std	Y+4, r21	; 0x04
    10f2:	6d 83       	std	Y+5, r22	; 0x05
    10f4:	7e 83       	std	Y+6, r23	; 0x06
    10f6:	38 87       	std	Y+8, r19	; 0x08
    10f8:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ReturnedState=OK;// Initialize the return state to OK
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	89 83       	std	Y+1, r24	; 0x01
	      /* Check if the priority is within the valid range
	       *  priority if less than max no.of task assign this task in TCB*/
		if(Copy_u8Priority < MAX_NUM_OF_TASKS)
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	85 30       	cpi	r24, 0x05	; 5
    1102:	18 f5       	brcc	.+70     	; 0x114a <RTOS_voidCreateTask+0x72>
		{
	        // Set the task's periodicity
			RtosTasks[Copy_u8Priority].periodicity=Copy_u8Priodicity;
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	4b 81       	ldd	r20, Y+3	; 0x03
    110c:	5c 81       	ldd	r21, Y+4	; 0x04
    110e:	c9 01       	movw	r24, r18
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	82 0f       	add	r24, r18
    111a:	93 1f       	adc	r25, r19
    111c:	fc 01       	movw	r30, r24
    111e:	e8 58       	subi	r30, 0x88	; 136
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	51 83       	std	Z+1, r21	; 0x01
    1124:	40 83       	st	Z, r20
	        // Set the pointer to the task function
			RtosTasks[Copy_u8Priority].PvTaskFunc=Copy_voidPvTaskF;
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	c9 01       	movw	r24, r18
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	82 0f       	add	r24, r18
    1138:	93 1f       	adc	r25, r19
    113a:	fc 01       	movw	r30, r24
    113c:	e6 58       	subi	r30, 0x86	; 134
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	8f 81       	ldd	r24, Y+7	; 0x07
    1142:	98 85       	ldd	r25, Y+8	; 0x08
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	80 83       	st	Z, r24
    1148:	01 c0       	rjmp	.+2      	; 0x114c <RTOS_voidCreateTask+0x74>
		}

		else
	    {   // Priority exceeds the maximum number of tasks, return NOT_OK
		    Local_u8ReturnedState=NOT_OK;
    114a:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8ReturnedState;
    114c:	89 81       	ldd	r24, Y+1	; 0x01

}
    114e:	28 96       	adiw	r28, 0x08	; 8
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <voidScheduler>:
static void voidScheduler()
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	0f 92       	push	r0
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
		static u16 Local_u16TickCounter=0;//counter to  count Tick timer
		u8 Local_u8TaskCounter;//counter to count tasks
		Local_u16TickCounter++;//increment the tick counter for each invocation of the scheduler function.
    116a:	80 91 91 00 	lds	r24, 0x0091
    116e:	90 91 92 00 	lds	r25, 0x0092
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	90 93 92 00 	sts	0x0092, r25
    1178:	80 93 91 00 	sts	0x0091, r24

		/*Loop on all tasks for check their periodicity */
		for(Local_u8TaskCounter=0;Local_u8TaskCounter<MAX_NUM_OF_TASKS;Local_u8TaskCounter++)
    117c:	19 82       	std	Y+1, r1	; 0x01
    117e:	4e c0       	rjmp	.+156    	; 0x121c <voidScheduler+0xbc>
		{
			/* checks if the current tick count is a multiple of the task's periodicity.
            If it is, the task is due for execution.*/
			if((Local_u16TickCounter%RtosTasks[Local_u8TaskCounter].periodicity)==0)
    1180:	40 91 91 00 	lds	r20, 0x0091
    1184:	50 91 92 00 	lds	r21, 0x0092
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	c9 01       	movw	r24, r18
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	82 0f       	add	r24, r18
    119a:	93 1f       	adc	r25, r19
    119c:	fc 01       	movw	r30, r24
    119e:	e8 58       	subi	r30, 0x88	; 136
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	20 81       	ld	r18, Z
    11a4:	31 81       	ldd	r19, Z+1	; 0x01
    11a6:	ca 01       	movw	r24, r20
    11a8:	b9 01       	movw	r22, r18
    11aa:	0e 94 47 19 	call	0x328e	; 0x328e <__udivmodhi4>
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	91 f5       	brne	.+100    	; 0x1216 <voidScheduler+0xb6>
			{
				// Check if the task's function pointer is not NULL
				if(((RtosTasks[Local_u8TaskCounter].PvTaskFunc) != NULL) &&(RtosTasks[Local_u8TaskCounter].taskState == TASK_READY))
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	c9 01       	movw	r24, r18
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	82 0f       	add	r24, r18
    11c4:	93 1f       	adc	r25, r19
    11c6:	fc 01       	movw	r30, r24
    11c8:	e6 58       	subi	r30, 0x86	; 134
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 81       	ld	r24, Z
    11ce:	91 81       	ldd	r25, Z+1	; 0x01
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	09 f1       	breq	.+66     	; 0x1216 <voidScheduler+0xb6>
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	c9 01       	movw	r24, r18
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	82 0f       	add	r24, r18
    11e6:	93 1f       	adc	r25, r19
    11e8:	fc 01       	movw	r30, r24
    11ea:	e4 58       	subi	r30, 0x84	; 132
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	80 81       	ld	r24, Z
    11f0:	88 23       	and	r24, r24
    11f2:	89 f4       	brne	.+34     	; 0x1216 <voidScheduler+0xb6>
				{
					/*Invoke this task*/
					RtosTasks[Local_u8TaskCounter].PvTaskFunc();
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	c9 01       	movw	r24, r18
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	82 0f       	add	r24, r18
    1206:	93 1f       	adc	r25, r19
    1208:	fc 01       	movw	r30, r24
    120a:	e6 58       	subi	r30, 0x86	; 134
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	01 90       	ld	r0, Z+
    1210:	f0 81       	ld	r31, Z
    1212:	e0 2d       	mov	r30, r0
    1214:	09 95       	icall
		static u16 Local_u16TickCounter=0;//counter to  count Tick timer
		u8 Local_u8TaskCounter;//counter to count tasks
		Local_u16TickCounter++;//increment the tick counter for each invocation of the scheduler function.

		/*Loop on all tasks for check their periodicity */
		for(Local_u8TaskCounter=0;Local_u8TaskCounter<MAX_NUM_OF_TASKS;Local_u8TaskCounter++)
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	8f 5f       	subi	r24, 0xFF	; 255
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	85 30       	cpi	r24, 0x05	; 5
    1220:	08 f4       	brcc	.+2      	; 0x1224 <voidScheduler+0xc4>
    1222:	ae cf       	rjmp	.-164    	; 0x1180 <voidScheduler+0x20>
					//Do nothing
				}
			}
		}

}
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <RTOS_voidTerminateTask>:


void RTOS_voidTerminateTask(u8 Copy_u8TaskID )
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	0f 92       	push	r0
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	89 83       	std	Y+1, r24	; 0x01
    // Terminate this task by setting its function pointer to NULL
	RtosTasks[Copy_u8TaskID].PvTaskFunc =NULL ;
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	c9 01       	movw	r24, r18
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	82 0f       	add	r24, r18
    124a:	93 1f       	adc	r25, r19
    124c:	fc 01       	movw	r30, r24
    124e:	e6 58       	subi	r30, 0x86	; 134
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	11 82       	std	Z+1, r1	; 0x01
    1254:	10 82       	st	Z, r1
}
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <RTOS_voidPauseTask>:

void RTOS_voidPauseTask(u8 Copy_u8TaskID )
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	89 83       	std	Y+1, r24	; 0x01
    // Pause this task by setting its state to TASK_SUSPEND
	RtosTasks[Copy_u8TaskID].taskState	= TASK_SUSPEND ;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	c9 01       	movw	r24, r18
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	82 0f       	add	r24, r18
    127c:	93 1f       	adc	r25, r19
    127e:	fc 01       	movw	r30, r24
    1280:	e4 58       	subi	r30, 0x84	; 132
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	80 83       	st	Z, r24
}
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <RTOS_voidResumeTask>:

void RTOS_voidResumeTask(u8 Copy_u8TaskID )
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	0f 92       	push	r0
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	89 83       	std	Y+1, r24	; 0x01
    // Resume this task by setting its state to TASK_READY
	RtosTasks[Copy_u8TaskID].taskState	 = TASK_READY;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	c9 01       	movw	r24, r18
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	82 0f       	add	r24, r18
    12ae:	93 1f       	adc	r25, r19
    12b0:	fc 01       	movw	r30, r24
    12b2:	e4 58       	subi	r30, 0x84	; 132
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	10 82       	st	Z, r1
}
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <TIMER0_voidInit>:
#include"TIMER0_private.h"

static void (*Timer0_pvCompMatchCallBakFunc)(void)=NULL;

void TIMER0_voidInit(void)
{   /* Initialize Timer0 to work in CTC mode */
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    TCCR0 |= (1 << FOC0) | (1 << WGM01);
    12c8:	a3 e5       	ldi	r26, 0x53	; 83
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e3 e5       	ldi	r30, 0x53	; 83
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	88 68       	ori	r24, 0x88	; 136
    12d4:	8c 93       	st	X, r24

    /* Clear all prescaler bits */
    TCCR0 &= ~(0x07);
    12d6:	a3 e5       	ldi	r26, 0x53	; 83
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e3 e5       	ldi	r30, 0x53	; 83
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	88 7f       	andi	r24, 0xF8	; 248
    12e2:	8c 93       	st	X, r24

    /* Set the desired prescaler value */
    TCCR0 |= TIMER0_PreScaller;
    12e4:	a3 e5       	ldi	r26, 0x53	; 83
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e3 e5       	ldi	r30, 0x53	; 83
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	83 60       	ori	r24, 0x03	; 3
    12f0:	8c 93       	st	X, r24

    /* Set the compare value for CTC mode */
    OCR0 = TIMER0_compareValue;
    12f2:	ec e5       	ldi	r30, 0x5C	; 92
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8a ef       	ldi	r24, 0xFA	; 250
    12f8:	80 83       	st	Z, r24

    /* Enable the compare match interrupt for Timer0 */
    TIMSK |= (1 << OCIE0);
    12fa:	a9 e5       	ldi	r26, 0x59	; 89
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e9 e5       	ldi	r30, 0x59	; 89
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	82 60       	ori	r24, 0x02	; 2
    1306:	8c 93       	st	X, r24
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <TIMER0_compMatchSetCallBack>:

u8 TIMER0_compMatchSetCallBack(void(*Copy_PvCallBackFunc)(void))
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <TIMER0_compMatchSetCallBack+0x6>
    1314:	0f 92       	push	r0
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	9b 83       	std	Y+3, r25	; 0x03
    131c:	8a 83       	std	Y+2, r24	; 0x02
	u8 LocalErrorState=OK;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	89 83       	std	Y+1, r24	; 0x01
    /* Check if the provided pointer is valid */
	if(Copy_PvCallBackFunc !=NULL)
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	9b 81       	ldd	r25, Y+3	; 0x03
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	39 f0       	breq	.+14     	; 0x1338 <TIMER0_compMatchSetCallBack+0x2a>
	{
        /* Save the callback function in the global pointer */
		Timer0_pvCompMatchCallBakFunc=Copy_PvCallBackFunc;
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	9b 81       	ldd	r25, Y+3	; 0x03
    132e:	90 93 94 00 	sts	0x0094, r25
    1332:	80 93 93 00 	sts	0x0093, r24
    1336:	01 c0       	rjmp	.+2      	; 0x133a <TIMER0_compMatchSetCallBack+0x2c>
	}
	else
	{
        /* Return an error state if the pointer is NULL */
		LocalErrorState=NOT_OK;
    1338:	19 82       	std	Y+1, r1	; 0x01
	}
	return LocalErrorState;
    133a:	89 81       	ldd	r24, Y+1	; 0x01

}
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <__vector_10>:


/*Timer0 CTC ISR*/
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_pvCompMatchCallBakFunc !=NULL)
    1372:	80 91 93 00 	lds	r24, 0x0093
    1376:	90 91 94 00 	lds	r25, 0x0094
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	29 f0       	breq	.+10     	; 0x1388 <__vector_10+0x40>
	{

		Timer0_pvCompMatchCallBakFunc();
    137e:	e0 91 93 00 	lds	r30, 0x0093
    1382:	f0 91 94 00 	lds	r31, 0x0094
    1386:	09 95       	icall
	}
	else
	{
		/*Do Nothing*/
	}
}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

000013ae <LCD_voidInitial>:
#include "lcd_interface.h"
#include "lcd_config.h"


void LCD_voidInitial(void)
{
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	cc 54       	subi	r28, 0x4C	; 76
    13bc:	d0 40       	sbci	r29, 0x00	; 0
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	fe 01       	movw	r30, r28
    13ca:	e7 5b       	subi	r30, 0xB7	; 183
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	ac e0       	ldi	r26, 0x0C	; 12
    13d4:	b2 e4       	ldi	r27, 0x42	; 66
    13d6:	80 83       	st	Z, r24
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	a2 83       	std	Z+2, r26	; 0x02
    13dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13de:	8e 01       	movw	r16, r28
    13e0:	0b 5b       	subi	r16, 0xBB	; 187
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
    13e4:	fe 01       	movw	r30, r28
    13e6:	e7 5b       	subi	r30, 0xB7	; 183
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	60 81       	ld	r22, Z
    13ec:	71 81       	ldd	r23, Z+1	; 0x01
    13ee:	82 81       	ldd	r24, Z+2	; 0x02
    13f0:	93 81       	ldd	r25, Z+3	; 0x03
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	4a ef       	ldi	r20, 0xFA	; 250
    13f8:	54 e4       	ldi	r21, 0x44	; 68
    13fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	f8 01       	movw	r30, r16
    1404:	80 83       	st	Z, r24
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	a2 83       	std	Z+2, r26	; 0x02
    140a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    140c:	fe 01       	movw	r30, r28
    140e:	eb 5b       	subi	r30, 0xBB	; 187
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	60 81       	ld	r22, Z
    1414:	71 81       	ldd	r23, Z+1	; 0x01
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e8       	ldi	r20, 0x80	; 128
    1420:	5f e3       	ldi	r21, 0x3F	; 63
    1422:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1426:	88 23       	and	r24, r24
    1428:	44 f4       	brge	.+16     	; 0x143a <LCD_voidInitial+0x8c>
		__ticks = 1;
    142a:	fe 01       	movw	r30, r28
    142c:	ed 5b       	subi	r30, 0xBD	; 189
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	91 83       	std	Z+1, r25	; 0x01
    1436:	80 83       	st	Z, r24
    1438:	64 c0       	rjmp	.+200    	; 0x1502 <LCD_voidInitial+0x154>
	else if (__tmp > 65535)
    143a:	fe 01       	movw	r30, r28
    143c:	eb 5b       	subi	r30, 0xBB	; 187
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	60 81       	ld	r22, Z
    1442:	71 81       	ldd	r23, Z+1	; 0x01
    1444:	82 81       	ldd	r24, Z+2	; 0x02
    1446:	93 81       	ldd	r25, Z+3	; 0x03
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	3f ef       	ldi	r19, 0xFF	; 255
    144c:	4f e7       	ldi	r20, 0x7F	; 127
    144e:	57 e4       	ldi	r21, 0x47	; 71
    1450:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1454:	18 16       	cp	r1, r24
    1456:	0c f0       	brlt	.+2      	; 0x145a <LCD_voidInitial+0xac>
    1458:	43 c0       	rjmp	.+134    	; 0x14e0 <LCD_voidInitial+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145a:	fe 01       	movw	r30, r28
    145c:	e7 5b       	subi	r30, 0xB7	; 183
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	60 81       	ld	r22, Z
    1462:	71 81       	ldd	r23, Z+1	; 0x01
    1464:	82 81       	ldd	r24, Z+2	; 0x02
    1466:	93 81       	ldd	r25, Z+3	; 0x03
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	40 e2       	ldi	r20, 0x20	; 32
    146e:	51 e4       	ldi	r21, 0x41	; 65
    1470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	8e 01       	movw	r16, r28
    147a:	0d 5b       	subi	r16, 0xBD	; 189
    147c:	1f 4f       	sbci	r17, 0xFF	; 255
    147e:	bc 01       	movw	r22, r24
    1480:	cd 01       	movw	r24, r26
    1482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	f8 01       	movw	r30, r16
    148c:	91 83       	std	Z+1, r25	; 0x01
    148e:	80 83       	st	Z, r24
    1490:	1f c0       	rjmp	.+62     	; 0x14d0 <LCD_voidInitial+0x122>
    1492:	fe 01       	movw	r30, r28
    1494:	ef 5b       	subi	r30, 0xBF	; 191
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	88 ec       	ldi	r24, 0xC8	; 200
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	91 83       	std	Z+1, r25	; 0x01
    149e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14a0:	fe 01       	movw	r30, r28
    14a2:	ef 5b       	subi	r30, 0xBF	; 191
    14a4:	ff 4f       	sbci	r31, 0xFF	; 255
    14a6:	80 81       	ld	r24, Z
    14a8:	91 81       	ldd	r25, Z+1	; 0x01
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <LCD_voidInitial+0xfc>
    14ae:	fe 01       	movw	r30, r28
    14b0:	ef 5b       	subi	r30, 0xBF	; 191
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b8:	de 01       	movw	r26, r28
    14ba:	ad 5b       	subi	r26, 0xBD	; 189
    14bc:	bf 4f       	sbci	r27, 0xFF	; 255
    14be:	fe 01       	movw	r30, r28
    14c0:	ed 5b       	subi	r30, 0xBD	; 189
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	11 96       	adiw	r26, 0x01	; 1
    14cc:	9c 93       	st	X, r25
    14ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d0:	fe 01       	movw	r30, r28
    14d2:	ed 5b       	subi	r30, 0xBD	; 189
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	d1 f6       	brne	.-76     	; 0x1492 <LCD_voidInitial+0xe4>
    14de:	24 c0       	rjmp	.+72     	; 0x1528 <LCD_voidInitial+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	8e 01       	movw	r16, r28
    14e2:	0d 5b       	subi	r16, 0xBD	; 189
    14e4:	1f 4f       	sbci	r17, 0xFF	; 255
    14e6:	fe 01       	movw	r30, r28
    14e8:	eb 5b       	subi	r30, 0xBB	; 187
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	f8 01       	movw	r30, r16
    14fe:	91 83       	std	Z+1, r25	; 0x01
    1500:	80 83       	st	Z, r24
    1502:	fe 01       	movw	r30, r28
    1504:	ed 5b       	subi	r30, 0xBD	; 189
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	fe 01       	movw	r30, r28
    150e:	ff 96       	adiw	r30, 0x3f	; 63
    1510:	91 83       	std	Z+1, r25	; 0x01
    1512:	80 83       	st	Z, r24
    1514:	fe 01       	movw	r30, r28
    1516:	ff 96       	adiw	r30, 0x3f	; 63
    1518:	80 81       	ld	r24, Z
    151a:	91 81       	ldd	r25, Z+1	; 0x01
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <LCD_voidInitial+0x16e>
    1520:	fe 01       	movw	r30, r28
    1522:	ff 96       	adiw	r30, 0x3f	; 63
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	80 83       	st	Z, r24
		_delay_ms(35);
		LCD_voidSendCommend(0b0000111000);
    1528:	88 e3       	ldi	r24, 0x38	; 56
    152a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LCD_voidSendCommend>
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a0 e2       	ldi	r26, 0x20	; 32
    1534:	b2 e4       	ldi	r27, 0x42	; 66
    1536:	8b af       	std	Y+59, r24	; 0x3b
    1538:	9c af       	std	Y+60, r25	; 0x3c
    153a:	ad af       	std	Y+61, r26	; 0x3d
    153c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    153e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1540:	7c ad       	ldd	r23, Y+60	; 0x3c
    1542:	8d ad       	ldd	r24, Y+61	; 0x3d
    1544:	9e ad       	ldd	r25, Y+62	; 0x3e
    1546:	2b ea       	ldi	r18, 0xAB	; 171
    1548:	3a ea       	ldi	r19, 0xAA	; 170
    154a:	4a e2       	ldi	r20, 0x2A	; 42
    154c:	50 e4       	ldi	r21, 0x40	; 64
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	8f ab       	std	Y+55, r24	; 0x37
    1558:	98 af       	std	Y+56, r25	; 0x38
    155a:	a9 af       	std	Y+57, r26	; 0x39
    155c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    155e:	6f a9       	ldd	r22, Y+55	; 0x37
    1560:	78 ad       	ldd	r23, Y+56	; 0x38
    1562:	89 ad       	ldd	r24, Y+57	; 0x39
    1564:	9a ad       	ldd	r25, Y+58	; 0x3a
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e8       	ldi	r20, 0x80	; 128
    156c:	5f e3       	ldi	r21, 0x3F	; 63
    156e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1572:	88 23       	and	r24, r24
    1574:	1c f4       	brge	.+6      	; 0x157c <LCD_voidInitial+0x1ce>
		__ticks = 1;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	8e ab       	std	Y+54, r24	; 0x36
    157a:	91 c0       	rjmp	.+290    	; 0x169e <LCD_voidInitial+0x2f0>
	else if (__tmp > 255)
    157c:	6f a9       	ldd	r22, Y+55	; 0x37
    157e:	78 ad       	ldd	r23, Y+56	; 0x38
    1580:	89 ad       	ldd	r24, Y+57	; 0x39
    1582:	9a ad       	ldd	r25, Y+58	; 0x3a
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4f e7       	ldi	r20, 0x7F	; 127
    158a:	53 e4       	ldi	r21, 0x43	; 67
    158c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1590:	18 16       	cp	r1, r24
    1592:	0c f0       	brlt	.+2      	; 0x1596 <LCD_voidInitial+0x1e8>
    1594:	7b c0       	rjmp	.+246    	; 0x168c <LCD_voidInitial+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1596:	6b ad       	ldd	r22, Y+59	; 0x3b
    1598:	7c ad       	ldd	r23, Y+60	; 0x3c
    159a:	8d ad       	ldd	r24, Y+61	; 0x3d
    159c:	9e ad       	ldd	r25, Y+62	; 0x3e
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	4a e7       	ldi	r20, 0x7A	; 122
    15a4:	54 e4       	ldi	r21, 0x44	; 68
    15a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	8a ab       	std	Y+50, r24	; 0x32
    15b0:	9b ab       	std	Y+51, r25	; 0x33
    15b2:	ac ab       	std	Y+52, r26	; 0x34
    15b4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b6:	6a a9       	ldd	r22, Y+50	; 0x32
    15b8:	7b a9       	ldd	r23, Y+51	; 0x33
    15ba:	8c a9       	ldd	r24, Y+52	; 0x34
    15bc:	9d a9       	ldd	r25, Y+53	; 0x35
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	4a ef       	ldi	r20, 0xFA	; 250
    15c4:	54 e4       	ldi	r21, 0x44	; 68
    15c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	8e a7       	std	Y+46, r24	; 0x2e
    15d0:	9f a7       	std	Y+47, r25	; 0x2f
    15d2:	a8 ab       	std	Y+48, r26	; 0x30
    15d4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    15d6:	6e a5       	ldd	r22, Y+46	; 0x2e
    15d8:	7f a5       	ldd	r23, Y+47	; 0x2f
    15da:	88 a9       	ldd	r24, Y+48	; 0x30
    15dc:	99 a9       	ldd	r25, Y+49	; 0x31
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e8       	ldi	r20, 0x80	; 128
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <LCD_voidInitial+0x24a>
		__ticks = 1;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9d a7       	std	Y+45, r25	; 0x2d
    15f4:	8c a7       	std	Y+44, r24	; 0x2c
    15f6:	3f c0       	rjmp	.+126    	; 0x1676 <LCD_voidInitial+0x2c8>
	else if (__tmp > 65535)
    15f8:	6e a5       	ldd	r22, Y+46	; 0x2e
    15fa:	7f a5       	ldd	r23, Y+47	; 0x2f
    15fc:	88 a9       	ldd	r24, Y+48	; 0x30
    15fe:	99 a9       	ldd	r25, Y+49	; 0x31
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	3f ef       	ldi	r19, 0xFF	; 255
    1604:	4f e7       	ldi	r20, 0x7F	; 127
    1606:	57 e4       	ldi	r21, 0x47	; 71
    1608:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    160c:	18 16       	cp	r1, r24
    160e:	4c f5       	brge	.+82     	; 0x1662 <LCD_voidInitial+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1610:	6a a9       	ldd	r22, Y+50	; 0x32
    1612:	7b a9       	ldd	r23, Y+51	; 0x33
    1614:	8c a9       	ldd	r24, Y+52	; 0x34
    1616:	9d a9       	ldd	r25, Y+53	; 0x35
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e2       	ldi	r20, 0x20	; 32
    161e:	51 e4       	ldi	r21, 0x41	; 65
    1620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	9d a7       	std	Y+45, r25	; 0x2d
    1636:	8c a7       	std	Y+44, r24	; 0x2c
    1638:	0f c0       	rjmp	.+30     	; 0x1658 <LCD_voidInitial+0x2aa>
    163a:	88 ec       	ldi	r24, 0xC8	; 200
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9b a7       	std	Y+43, r25	; 0x2b
    1640:	8a a7       	std	Y+42, r24	; 0x2a
    1642:	8a a5       	ldd	r24, Y+42	; 0x2a
    1644:	9b a5       	ldd	r25, Y+43	; 0x2b
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <LCD_voidInitial+0x298>
    164a:	9b a7       	std	Y+43, r25	; 0x2b
    164c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1650:	9d a5       	ldd	r25, Y+45	; 0x2d
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	9d a7       	std	Y+45, r25	; 0x2d
    1656:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1658:	8c a5       	ldd	r24, Y+44	; 0x2c
    165a:	9d a5       	ldd	r25, Y+45	; 0x2d
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	69 f7       	brne	.-38     	; 0x163a <LCD_voidInitial+0x28c>
    1660:	24 c0       	rjmp	.+72     	; 0x16aa <LCD_voidInitial+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1662:	6e a5       	ldd	r22, Y+46	; 0x2e
    1664:	7f a5       	ldd	r23, Y+47	; 0x2f
    1666:	88 a9       	ldd	r24, Y+48	; 0x30
    1668:	99 a9       	ldd	r25, Y+49	; 0x31
    166a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	9d a7       	std	Y+45, r25	; 0x2d
    1674:	8c a7       	std	Y+44, r24	; 0x2c
    1676:	8c a5       	ldd	r24, Y+44	; 0x2c
    1678:	9d a5       	ldd	r25, Y+45	; 0x2d
    167a:	99 a7       	std	Y+41, r25	; 0x29
    167c:	88 a7       	std	Y+40, r24	; 0x28
    167e:	88 a5       	ldd	r24, Y+40	; 0x28
    1680:	99 a5       	ldd	r25, Y+41	; 0x29
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <LCD_voidInitial+0x2d4>
    1686:	99 a7       	std	Y+41, r25	; 0x29
    1688:	88 a7       	std	Y+40, r24	; 0x28
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <LCD_voidInitial+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    168c:	6f a9       	ldd	r22, Y+55	; 0x37
    168e:	78 ad       	ldd	r23, Y+56	; 0x38
    1690:	89 ad       	ldd	r24, Y+57	; 0x39
    1692:	9a ad       	ldd	r25, Y+58	; 0x3a
    1694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	8e ab       	std	Y+54, r24	; 0x36
    169e:	8e a9       	ldd	r24, Y+54	; 0x36
    16a0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16a2:	8f a1       	ldd	r24, Y+39	; 0x27
    16a4:	8a 95       	dec	r24
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <LCD_voidInitial+0x2f6>
    16a8:	8f a3       	std	Y+39, r24	; 0x27
		_delay_us(40);
		LCD_voidSendCommend(0b0000001111);
    16aa:	8f e0       	ldi	r24, 0x0F	; 15
    16ac:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LCD_voidSendCommend>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a0 e2       	ldi	r26, 0x20	; 32
    16b6:	b2 e4       	ldi	r27, 0x42	; 66
    16b8:	8b a3       	std	Y+35, r24	; 0x23
    16ba:	9c a3       	std	Y+36, r25	; 0x24
    16bc:	ad a3       	std	Y+37, r26	; 0x25
    16be:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16c0:	6b a1       	ldd	r22, Y+35	; 0x23
    16c2:	7c a1       	ldd	r23, Y+36	; 0x24
    16c4:	8d a1       	ldd	r24, Y+37	; 0x25
    16c6:	9e a1       	ldd	r25, Y+38	; 0x26
    16c8:	2b ea       	ldi	r18, 0xAB	; 171
    16ca:	3a ea       	ldi	r19, 0xAA	; 170
    16cc:	4a e2       	ldi	r20, 0x2A	; 42
    16ce:	50 e4       	ldi	r21, 0x40	; 64
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	8f 8f       	std	Y+31, r24	; 0x1f
    16da:	98 a3       	std	Y+32, r25	; 0x20
    16dc:	a9 a3       	std	Y+33, r26	; 0x21
    16de:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    16e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16e2:	78 a1       	ldd	r23, Y+32	; 0x20
    16e4:	89 a1       	ldd	r24, Y+33	; 0x21
    16e6:	9a a1       	ldd	r25, Y+34	; 0x22
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e8       	ldi	r20, 0x80	; 128
    16ee:	5f e3       	ldi	r21, 0x3F	; 63
    16f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16f4:	88 23       	and	r24, r24
    16f6:	1c f4       	brge	.+6      	; 0x16fe <LCD_voidInitial+0x350>
		__ticks = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	8e 8f       	std	Y+30, r24	; 0x1e
    16fc:	91 c0       	rjmp	.+290    	; 0x1820 <LCD_voidInitial+0x472>
	else if (__tmp > 255)
    16fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1700:	78 a1       	ldd	r23, Y+32	; 0x20
    1702:	89 a1       	ldd	r24, Y+33	; 0x21
    1704:	9a a1       	ldd	r25, Y+34	; 0x22
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	4f e7       	ldi	r20, 0x7F	; 127
    170c:	53 e4       	ldi	r21, 0x43	; 67
    170e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1712:	18 16       	cp	r1, r24
    1714:	0c f0       	brlt	.+2      	; 0x1718 <LCD_voidInitial+0x36a>
    1716:	7b c0       	rjmp	.+246    	; 0x180e <LCD_voidInitial+0x460>
	{
		_delay_ms(__us / 1000.0);
    1718:	6b a1       	ldd	r22, Y+35	; 0x23
    171a:	7c a1       	ldd	r23, Y+36	; 0x24
    171c:	8d a1       	ldd	r24, Y+37	; 0x25
    171e:	9e a1       	ldd	r25, Y+38	; 0x26
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	4a e7       	ldi	r20, 0x7A	; 122
    1726:	54 e4       	ldi	r21, 0x44	; 68
    1728:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	8a 8f       	std	Y+26, r24	; 0x1a
    1732:	9b 8f       	std	Y+27, r25	; 0x1b
    1734:	ac 8f       	std	Y+28, r26	; 0x1c
    1736:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1738:	6a 8d       	ldd	r22, Y+26	; 0x1a
    173a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    173c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    173e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	4a ef       	ldi	r20, 0xFA	; 250
    1746:	54 e4       	ldi	r21, 0x44	; 68
    1748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	8e 8b       	std	Y+22, r24	; 0x16
    1752:	9f 8b       	std	Y+23, r25	; 0x17
    1754:	a8 8f       	std	Y+24, r26	; 0x18
    1756:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1758:	6e 89       	ldd	r22, Y+22	; 0x16
    175a:	7f 89       	ldd	r23, Y+23	; 0x17
    175c:	88 8d       	ldd	r24, Y+24	; 0x18
    175e:	99 8d       	ldd	r25, Y+25	; 0x19
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e8       	ldi	r20, 0x80	; 128
    1766:	5f e3       	ldi	r21, 0x3F	; 63
    1768:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    176c:	88 23       	and	r24, r24
    176e:	2c f4       	brge	.+10     	; 0x177a <LCD_voidInitial+0x3cc>
		__ticks = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9d 8b       	std	Y+21, r25	; 0x15
    1776:	8c 8b       	std	Y+20, r24	; 0x14
    1778:	3f c0       	rjmp	.+126    	; 0x17f8 <LCD_voidInitial+0x44a>
	else if (__tmp > 65535)
    177a:	6e 89       	ldd	r22, Y+22	; 0x16
    177c:	7f 89       	ldd	r23, Y+23	; 0x17
    177e:	88 8d       	ldd	r24, Y+24	; 0x18
    1780:	99 8d       	ldd	r25, Y+25	; 0x19
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	3f ef       	ldi	r19, 0xFF	; 255
    1786:	4f e7       	ldi	r20, 0x7F	; 127
    1788:	57 e4       	ldi	r21, 0x47	; 71
    178a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    178e:	18 16       	cp	r1, r24
    1790:	4c f5       	brge	.+82     	; 0x17e4 <LCD_voidInitial+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1792:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1794:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1796:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1798:	9d 8d       	ldd	r25, Y+29	; 0x1d
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e2       	ldi	r20, 0x20	; 32
    17a0:	51 e4       	ldi	r21, 0x41	; 65
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	bc 01       	movw	r22, r24
    17ac:	cd 01       	movw	r24, r26
    17ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	9d 8b       	std	Y+21, r25	; 0x15
    17b8:	8c 8b       	std	Y+20, r24	; 0x14
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <LCD_voidInitial+0x42c>
    17bc:	88 ec       	ldi	r24, 0xC8	; 200
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9b 8b       	std	Y+19, r25	; 0x13
    17c2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17c4:	8a 89       	ldd	r24, Y+18	; 0x12
    17c6:	9b 89       	ldd	r25, Y+19	; 0x13
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <LCD_voidInitial+0x41a>
    17cc:	9b 8b       	std	Y+19, r25	; 0x13
    17ce:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d0:	8c 89       	ldd	r24, Y+20	; 0x14
    17d2:	9d 89       	ldd	r25, Y+21	; 0x15
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	9d 8b       	std	Y+21, r25	; 0x15
    17d8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17da:	8c 89       	ldd	r24, Y+20	; 0x14
    17dc:	9d 89       	ldd	r25, Y+21	; 0x15
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	69 f7       	brne	.-38     	; 0x17bc <LCD_voidInitial+0x40e>
    17e2:	24 c0       	rjmp	.+72     	; 0x182c <LCD_voidInitial+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e4:	6e 89       	ldd	r22, Y+22	; 0x16
    17e6:	7f 89       	ldd	r23, Y+23	; 0x17
    17e8:	88 8d       	ldd	r24, Y+24	; 0x18
    17ea:	99 8d       	ldd	r25, Y+25	; 0x19
    17ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	9d 8b       	std	Y+21, r25	; 0x15
    17f6:	8c 8b       	std	Y+20, r24	; 0x14
    17f8:	8c 89       	ldd	r24, Y+20	; 0x14
    17fa:	9d 89       	ldd	r25, Y+21	; 0x15
    17fc:	99 8b       	std	Y+17, r25	; 0x11
    17fe:	88 8b       	std	Y+16, r24	; 0x10
    1800:	88 89       	ldd	r24, Y+16	; 0x10
    1802:	99 89       	ldd	r25, Y+17	; 0x11
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <LCD_voidInitial+0x456>
    1808:	99 8b       	std	Y+17, r25	; 0x11
    180a:	88 8b       	std	Y+16, r24	; 0x10
    180c:	0f c0       	rjmp	.+30     	; 0x182c <LCD_voidInitial+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    180e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1810:	78 a1       	ldd	r23, Y+32	; 0x20
    1812:	89 a1       	ldd	r24, Y+33	; 0x21
    1814:	9a a1       	ldd	r25, Y+34	; 0x22
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8e 8f       	std	Y+30, r24	; 0x1e
    1820:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1822:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1824:	8f 85       	ldd	r24, Y+15	; 0x0f
    1826:	8a 95       	dec	r24
    1828:	f1 f7       	brne	.-4      	; 0x1826 <LCD_voidInitial+0x478>
    182a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(40);
		LCD_voidSendCommend(0b0000000001);
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LCD_voidSendCommend>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e0       	ldi	r26, 0x00	; 0
    1838:	b0 e4       	ldi	r27, 0x40	; 64
    183a:	8b 87       	std	Y+11, r24	; 0x0b
    183c:	9c 87       	std	Y+12, r25	; 0x0c
    183e:	ad 87       	std	Y+13, r26	; 0x0d
    1840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	6b 85       	ldd	r22, Y+11	; 0x0b
    1844:	7c 85       	ldd	r23, Y+12	; 0x0c
    1846:	8d 85       	ldd	r24, Y+13	; 0x0d
    1848:	9e 85       	ldd	r25, Y+14	; 0x0e
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4a ef       	ldi	r20, 0xFA	; 250
    1850:	54 e4       	ldi	r21, 0x44	; 68
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8f 83       	std	Y+7, r24	; 0x07
    185c:	98 87       	std	Y+8, r25	; 0x08
    185e:	a9 87       	std	Y+9, r26	; 0x09
    1860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	2c f4       	brge	.+10     	; 0x1884 <LCD_voidInitial+0x4d6>
		__ticks = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <LCD_voidInitial+0x554>
	else if (__tmp > 65535)
    1884:	6f 81       	ldd	r22, Y+7	; 0x07
    1886:	78 85       	ldd	r23, Y+8	; 0x08
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	4c f5       	brge	.+82     	; 0x18ee <LCD_voidInitial+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	6b 85       	ldd	r22, Y+11	; 0x0b
    189e:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <LCD_voidInitial+0x536>
    18c6:	88 ec       	ldi	r24, 0xC8	; 200
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCD_voidInitial+0x524>
    18d6:	9c 83       	std	Y+4, r25	; 0x04
    18d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f7       	brne	.-38     	; 0x18c6 <LCD_voidInitial+0x518>
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <LCD_voidInitial+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ee:	6f 81       	ldd	r22, Y+7	; 0x07
    18f0:	78 85       	ldd	r23, Y+8	; 0x08
    18f2:	89 85       	ldd	r24, Y+9	; 0x09
    18f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <LCD_voidInitial+0x560>
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		LCD_voidSendCommend(0b0000000110);
    1916:	86 e0       	ldi	r24, 0x06	; 6
    1918:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LCD_voidSendCommend>

}
    191c:	c4 5b       	subi	r28, 0xB4	; 180
    191e:	df 4f       	sbci	r29, 0xFF	; 255
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	1f 91       	pop	r17
    1930:	0f 91       	pop	r16
    1932:	08 95       	ret

00001934 <LCD_voidSendCommend>:
void LCD_voidSendCommend(u8 Copy_u8Commend)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	69 97       	sbiw	r28, 0x19	; 25
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	89 8f       	std	Y+25, r24	; 0x19
		/******RS = 0******/
		DIO_u8SetPinDirection(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RS_PIN ,DIO_u8_PIN_OUTPUT);
    194a:	82 e0       	ldi	r24, 0x02	; 2
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RS_PIN ,DIO_u8_PIN_LOW);
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
		/*****RW =0*******/
		DIO_u8SetPinDirection(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RW_PIN ,DIO_u8_PIN_OUTPUT);
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RW_PIN ,DIO_u8_PIN_LOW);
    1968:	82 e0       	ldi	r24, 0x02	; 2
    196a:	61 e0       	ldi	r22, 0x01	; 1
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
		/*****Send Command byte to data pin******/
		DIO_u8SetPortDirection(LCD_u8_DATA_PINS_INITIAL_PORT,DIO_u8_PORT_OUTPUT);
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	6f ef       	ldi	r22, 0xFF	; 255
    1976:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <DIO_u8SetPortDirection>
		DIO_u8SetPortValue(LCD_u8_DATA_PINS_INITIAL_PORT,Copy_u8Commend);
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	69 8d       	ldd	r22, Y+25	; 0x19
    197e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <DIO_u8SetPortValue>
		/*******SEND PULSE ON ENABLE PIN****/
		DIO_u8SetPinDirection(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_E_PIN ,DIO_u8_PIN_OUTPUT);
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	62 e0       	ldi	r22, 0x02	; 2
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_E_PIN ,DIO_u8_PIN_HIGH);
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	62 e0       	ldi	r22, 0x02	; 2
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	a0 e8       	ldi	r26, 0x80	; 128
    199c:	bf e3       	ldi	r27, 0x3F	; 63
    199e:	8d 8b       	std	Y+21, r24	; 0x15
    19a0:	9e 8b       	std	Y+22, r25	; 0x16
    19a2:	af 8b       	std	Y+23, r26	; 0x17
    19a4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19a6:	6d 89       	ldd	r22, Y+21	; 0x15
    19a8:	7e 89       	ldd	r23, Y+22	; 0x16
    19aa:	8f 89       	ldd	r24, Y+23	; 0x17
    19ac:	98 8d       	ldd	r25, Y+24	; 0x18
    19ae:	2b ea       	ldi	r18, 0xAB	; 171
    19b0:	3a ea       	ldi	r19, 0xAA	; 170
    19b2:	4a e2       	ldi	r20, 0x2A	; 42
    19b4:	50 e4       	ldi	r21, 0x40	; 64
    19b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	89 8b       	std	Y+17, r24	; 0x11
    19c0:	9a 8b       	std	Y+18, r25	; 0x12
    19c2:	ab 8b       	std	Y+19, r26	; 0x13
    19c4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19c6:	69 89       	ldd	r22, Y+17	; 0x11
    19c8:	7a 89       	ldd	r23, Y+18	; 0x12
    19ca:	8b 89       	ldd	r24, Y+19	; 0x13
    19cc:	9c 89       	ldd	r25, Y+20	; 0x14
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e8       	ldi	r20, 0x80	; 128
    19d4:	5f e3       	ldi	r21, 0x3F	; 63
    19d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19da:	88 23       	and	r24, r24
    19dc:	1c f4       	brge	.+6      	; 0x19e4 <LCD_voidSendCommend+0xb0>
		__ticks = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	88 8b       	std	Y+16, r24	; 0x10
    19e2:	91 c0       	rjmp	.+290    	; 0x1b06 <LCD_voidSendCommend+0x1d2>
	else if (__tmp > 255)
    19e4:	69 89       	ldd	r22, Y+17	; 0x11
    19e6:	7a 89       	ldd	r23, Y+18	; 0x12
    19e8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ea:	9c 89       	ldd	r25, Y+20	; 0x14
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4f e7       	ldi	r20, 0x7F	; 127
    19f2:	53 e4       	ldi	r21, 0x43	; 67
    19f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	0c f0       	brlt	.+2      	; 0x19fe <LCD_voidSendCommend+0xca>
    19fc:	7b c0       	rjmp	.+246    	; 0x1af4 <LCD_voidSendCommend+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    19fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1a00:	7e 89       	ldd	r23, Y+22	; 0x16
    1a02:	8f 89       	ldd	r24, Y+23	; 0x17
    1a04:	98 8d       	ldd	r25, Y+24	; 0x18
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4a e7       	ldi	r20, 0x7A	; 122
    1a0c:	54 e4       	ldi	r21, 0x44	; 68
    1a0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	8c 87       	std	Y+12, r24	; 0x0c
    1a18:	9d 87       	std	Y+13, r25	; 0x0d
    1a1a:	ae 87       	std	Y+14, r26	; 0x0e
    1a1c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a20:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a22:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a24:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a ef       	ldi	r20, 0xFA	; 250
    1a2c:	54 e4       	ldi	r21, 0x44	; 68
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	88 87       	std	Y+8, r24	; 0x08
    1a38:	99 87       	std	Y+9, r25	; 0x09
    1a3a:	aa 87       	std	Y+10, r26	; 0x0a
    1a3c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a3e:	68 85       	ldd	r22, Y+8	; 0x08
    1a40:	79 85       	ldd	r23, Y+9	; 0x09
    1a42:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a44:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <LCD_voidSendCommend+0x12c>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9f 83       	std	Y+7, r25	; 0x07
    1a5c:	8e 83       	std	Y+6, r24	; 0x06
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <LCD_voidSendCommend+0x1aa>
	else if (__tmp > 65535)
    1a60:	68 85       	ldd	r22, Y+8	; 0x08
    1a62:	79 85       	ldd	r23, Y+9	; 0x09
    1a64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f5       	brge	.+82     	; 0x1aca <LCD_voidSendCommend+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a78:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a7a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e2       	ldi	r20, 0x20	; 32
    1a86:	51 e4       	ldi	r21, 0x41	; 65
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9f 83       	std	Y+7, r25	; 0x07
    1a9e:	8e 83       	std	Y+6, r24	; 0x06
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LCD_voidSendCommend+0x18c>
    1aa2:	88 ec       	ldi	r24, 0xC8	; 200
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9d 83       	std	Y+5, r25	; 0x05
    1aa8:	8c 83       	std	Y+4, r24	; 0x04
    1aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1aac:	9d 81       	ldd	r25, Y+5	; 0x05
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_voidSendCommend+0x17a>
    1ab2:	9d 83       	std	Y+5, r25	; 0x05
    1ab4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	9f 83       	std	Y+7, r25	; 0x07
    1abe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <LCD_voidSendCommend+0x16e>
    1ac8:	24 c0       	rjmp	.+72     	; 0x1b12 <LCD_voidSendCommend+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	68 85       	ldd	r22, Y+8	; 0x08
    1acc:	79 85       	ldd	r23, Y+9	; 0x09
    1ace:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ad0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9f 83       	std	Y+7, r25	; 0x07
    1adc:	8e 83       	std	Y+6, r24	; 0x06
    1ade:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae2:	9b 83       	std	Y+3, r25	; 0x03
    1ae4:	8a 83       	std	Y+2, r24	; 0x02
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_voidSendCommend+0x1b6>
    1aee:	9b 83       	std	Y+3, r25	; 0x03
    1af0:	8a 83       	std	Y+2, r24	; 0x02
    1af2:	0f c0       	rjmp	.+30     	; 0x1b12 <LCD_voidSendCommend+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1af4:	69 89       	ldd	r22, Y+17	; 0x11
    1af6:	7a 89       	ldd	r23, Y+18	; 0x12
    1af8:	8b 89       	ldd	r24, Y+19	; 0x13
    1afa:	9c 89       	ldd	r25, Y+20	; 0x14
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	88 8b       	std	Y+16, r24	; 0x10
    1b06:	88 89       	ldd	r24, Y+16	; 0x10
    1b08:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	8a 95       	dec	r24
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_voidSendCommend+0x1d8>
    1b10:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_E_PIN ,DIO_u8_PIN_LOW);
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	62 e0       	ldi	r22, 0x02	; 2
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
}
    1b1c:	69 96       	adiw	r28, 0x19	; 25
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <LCD_voidSendChar>:
void LCD_voidSendChar(u8 Copy_u8Char)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	69 97       	sbiw	r28, 0x19	; 25
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	89 8f       	std	Y+25, r24	; 0x19
		/******RS = 1******/
		DIO_u8SetPinDirection(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RS_PIN ,DIO_u8_PIN_OUTPUT);
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RS_PIN ,DIO_u8_PIN_HIGH);
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
		/*****RW =0*******/
		DIO_u8SetPinDirection(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RW_PIN ,DIO_u8_PIN_OUTPUT);
    1b58:	82 e0       	ldi	r24, 0x02	; 2
    1b5a:	61 e0       	ldi	r22, 0x01	; 1
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RW_PIN ,DIO_u8_PIN_LOW);
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	61 e0       	ldi	r22, 0x01	; 1
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
		/*****Send Command byte to data pin******/
		DIO_u8SetPortDirection(LCD_u8_DATA_PINS_INITIAL_PORT,DIO_u8_PORT_OUTPUT);
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	6f ef       	ldi	r22, 0xFF	; 255
    1b70:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <DIO_u8SetPortDirection>
		DIO_u8SetPortValue(LCD_u8_DATA_PINS_INITIAL_PORT,Copy_u8Char);
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	69 8d       	ldd	r22, Y+25	; 0x19
    1b78:	0e 94 94 15 	call	0x2b28	; 0x2b28 <DIO_u8SetPortValue>
		/*******SEND PULSE ON ENABLE PIN****/
		DIO_u8SetPinDirection(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_E_PIN ,DIO_u8_PIN_OUTPUT);
    1b7c:	82 e0       	ldi	r24, 0x02	; 2
    1b7e:	62 e0       	ldi	r22, 0x02	; 2
    1b80:	41 e0       	ldi	r20, 0x01	; 1
    1b82:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_E_PIN ,DIO_u8_PIN_HIGH);
    1b86:	82 e0       	ldi	r24, 0x02	; 2
    1b88:	62 e0       	ldi	r22, 0x02	; 2
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e8       	ldi	r26, 0x80	; 128
    1b96:	bf e3       	ldi	r27, 0x3F	; 63
    1b98:	8d 8b       	std	Y+21, r24	; 0x15
    1b9a:	9e 8b       	std	Y+22, r25	; 0x16
    1b9c:	af 8b       	std	Y+23, r26	; 0x17
    1b9e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	2b ea       	ldi	r18, 0xAB	; 171
    1baa:	3a ea       	ldi	r19, 0xAA	; 170
    1bac:	4a e2       	ldi	r20, 0x2A	; 42
    1bae:	50 e4       	ldi	r21, 0x40	; 64
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	89 8b       	std	Y+17, r24	; 0x11
    1bba:	9a 8b       	std	Y+18, r25	; 0x12
    1bbc:	ab 8b       	std	Y+19, r26	; 0x13
    1bbe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1bc0:	69 89       	ldd	r22, Y+17	; 0x11
    1bc2:	7a 89       	ldd	r23, Y+18	; 0x12
    1bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	1c f4       	brge	.+6      	; 0x1bde <LCD_voidSendChar+0xb0>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	88 8b       	std	Y+16, r24	; 0x10
    1bdc:	91 c0       	rjmp	.+290    	; 0x1d00 <LCD_voidSendChar+0x1d2>
	else if (__tmp > 255)
    1bde:	69 89       	ldd	r22, Y+17	; 0x11
    1be0:	7a 89       	ldd	r23, Y+18	; 0x12
    1be2:	8b 89       	ldd	r24, Y+19	; 0x13
    1be4:	9c 89       	ldd	r25, Y+20	; 0x14
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4f e7       	ldi	r20, 0x7F	; 127
    1bec:	53 e4       	ldi	r21, 0x43	; 67
    1bee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	0c f0       	brlt	.+2      	; 0x1bf8 <LCD_voidSendChar+0xca>
    1bf6:	7b c0       	rjmp	.+246    	; 0x1cee <LCD_voidSendChar+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    1bf8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfa:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfe:	98 8d       	ldd	r25, Y+24	; 0x18
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a e7       	ldi	r20, 0x7A	; 122
    1c06:	54 e4       	ldi	r21, 0x44	; 68
    1c08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	8c 87       	std	Y+12, r24	; 0x0c
    1c12:	9d 87       	std	Y+13, r25	; 0x0d
    1c14:	ae 87       	std	Y+14, r26	; 0x0e
    1c16:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c18:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c1a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	4a ef       	ldi	r20, 0xFA	; 250
    1c26:	54 e4       	ldi	r21, 0x44	; 68
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	88 87       	std	Y+8, r24	; 0x08
    1c32:	99 87       	std	Y+9, r25	; 0x09
    1c34:	aa 87       	std	Y+10, r26	; 0x0a
    1c36:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c38:	68 85       	ldd	r22, Y+8	; 0x08
    1c3a:	79 85       	ldd	r23, Y+9	; 0x09
    1c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e8       	ldi	r20, 0x80	; 128
    1c46:	5f e3       	ldi	r21, 0x3F	; 63
    1c48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c4c:	88 23       	and	r24, r24
    1c4e:	2c f4       	brge	.+10     	; 0x1c5a <LCD_voidSendChar+0x12c>
		__ticks = 1;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9f 83       	std	Y+7, r25	; 0x07
    1c56:	8e 83       	std	Y+6, r24	; 0x06
    1c58:	3f c0       	rjmp	.+126    	; 0x1cd8 <LCD_voidSendChar+0x1aa>
	else if (__tmp > 65535)
    1c5a:	68 85       	ldd	r22, Y+8	; 0x08
    1c5c:	79 85       	ldd	r23, Y+9	; 0x09
    1c5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	3f ef       	ldi	r19, 0xFF	; 255
    1c66:	4f e7       	ldi	r20, 0x7F	; 127
    1c68:	57 e4       	ldi	r21, 0x47	; 71
    1c6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c6e:	18 16       	cp	r1, r24
    1c70:	4c f5       	brge	.+82     	; 0x1cc4 <LCD_voidSendChar+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c72:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c74:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c76:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c78:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e2       	ldi	r20, 0x20	; 32
    1c80:	51 e4       	ldi	r21, 0x41	; 65
    1c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9f 83       	std	Y+7, r25	; 0x07
    1c98:	8e 83       	std	Y+6, r24	; 0x06
    1c9a:	0f c0       	rjmp	.+30     	; 0x1cba <LCD_voidSendChar+0x18c>
    1c9c:	88 ec       	ldi	r24, 0xC8	; 200
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9d 83       	std	Y+5, r25	; 0x05
    1ca2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <LCD_voidSendChar+0x17a>
    1cac:	9d 83       	std	Y+5, r25	; 0x05
    1cae:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	9f 83       	std	Y+7, r25	; 0x07
    1cb8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cba:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	69 f7       	brne	.-38     	; 0x1c9c <LCD_voidSendChar+0x16e>
    1cc2:	24 c0       	rjmp	.+72     	; 0x1d0c <LCD_voidSendChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc4:	68 85       	ldd	r22, Y+8	; 0x08
    1cc6:	79 85       	ldd	r23, Y+9	; 0x09
    1cc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cca:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	9f 83       	std	Y+7, r25	; 0x07
    1cd6:	8e 83       	std	Y+6, r24	; 0x06
    1cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cda:	9f 81       	ldd	r25, Y+7	; 0x07
    1cdc:	9b 83       	std	Y+3, r25	; 0x03
    1cde:	8a 83       	std	Y+2, r24	; 0x02
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <LCD_voidSendChar+0x1b6>
    1ce8:	9b 83       	std	Y+3, r25	; 0x03
    1cea:	8a 83       	std	Y+2, r24	; 0x02
    1cec:	0f c0       	rjmp	.+30     	; 0x1d0c <LCD_voidSendChar+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cee:	69 89       	ldd	r22, Y+17	; 0x11
    1cf0:	7a 89       	ldd	r23, Y+18	; 0x12
    1cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	88 8b       	std	Y+16, r24	; 0x10
    1d00:	88 89       	ldd	r24, Y+16	; 0x10
    1d02:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	8a 95       	dec	r24
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_voidSendChar+0x1d8>
    1d0a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_E_PIN ,DIO_u8_PIN_LOW);
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	62 e0       	ldi	r22, 0x02	; 2
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
}
    1d16:	69 96       	adiw	r28, 0x19	; 25
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <LCD_voidSendStr>:
void LCD_voidSendStr(u8 s[])
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	62 97       	sbiw	r28, 0x12	; 18
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	9a 8b       	std	Y+18, r25	; 0x12
    1d3e:	89 8b       	std	Y+17, r24	; 0x11
		u8 i=0;
    1d40:	18 8a       	std	Y+16, r1	; 0x10
		u8 size=strlen(s);
    1d42:	89 89       	ldd	r24, Y+17	; 0x11
    1d44:	9a 89       	ldd	r25, Y+18	; 0x12
    1d46:	0e 94 c7 19 	call	0x338e	; 0x338e <strlen>
    1d4a:	8f 87       	std	Y+15, r24	; 0x0f
    1d4c:	80 c0       	rjmp	.+256    	; 0x1e4e <LCD_voidSendStr+0x126>
		while(i<size)
			{
			    LCD_voidSendChar(s[i]);
    1d4e:	88 89       	ldd	r24, Y+16	; 0x10
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	89 89       	ldd	r24, Y+17	; 0x11
    1d56:	9a 89       	ldd	r25, Y+18	; 0x12
    1d58:	fc 01       	movw	r30, r24
    1d5a:	e2 0f       	add	r30, r18
    1d5c:	f3 1f       	adc	r31, r19
    1d5e:	80 81       	ld	r24, Z
    1d60:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_voidSendChar>
				i++;
    1d64:	88 89       	ldd	r24, Y+16	; 0x10
    1d66:	8f 5f       	subi	r24, 0xFF	; 255
    1d68:	88 8b       	std	Y+16, r24	; 0x10
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 e0       	ldi	r26, 0x00	; 0
    1d70:	b0 e4       	ldi	r27, 0x40	; 64
    1d72:	8b 87       	std	Y+11, r24	; 0x0b
    1d74:	9c 87       	std	Y+12, r25	; 0x0c
    1d76:	ad 87       	std	Y+13, r26	; 0x0d
    1d78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a ef       	ldi	r20, 0xFA	; 250
    1d88:	54 e4       	ldi	r21, 0x44	; 68
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8f 83       	std	Y+7, r24	; 0x07
    1d94:	98 87       	std	Y+8, r25	; 0x08
    1d96:	a9 87       	std	Y+9, r26	; 0x09
    1d98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e8       	ldi	r20, 0x80	; 128
    1da8:	5f e3       	ldi	r21, 0x3F	; 63
    1daa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dae:	88 23       	and	r24, r24
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <LCD_voidSendStr+0x94>
		__ticks = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9e 83       	std	Y+6, r25	; 0x06
    1db8:	8d 83       	std	Y+5, r24	; 0x05
    1dba:	3f c0       	rjmp	.+126    	; 0x1e3a <LCD_voidSendStr+0x112>
	else if (__tmp > 65535)
    1dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbe:	78 85       	ldd	r23, Y+8	; 0x08
    1dc0:	89 85       	ldd	r24, Y+9	; 0x09
    1dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	3f ef       	ldi	r19, 0xFF	; 255
    1dc8:	4f e7       	ldi	r20, 0x7F	; 127
    1dca:	57 e4       	ldi	r21, 0x47	; 71
    1dcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd0:	18 16       	cp	r1, r24
    1dd2:	4c f5       	brge	.+82     	; 0x1e26 <LCD_voidSendStr+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <LCD_voidSendStr+0xf4>
    1dfe:	88 ec       	ldi	r24, 0xC8	; 200
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9c 83       	std	Y+4, r25	; 0x04
    1e04:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_voidSendStr+0xe2>
    1e0e:	9c 83       	std	Y+4, r25	; 0x04
    1e10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
    1e14:	9e 81       	ldd	r25, Y+6	; 0x06
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <LCD_voidSendStr+0xd6>
    1e24:	14 c0       	rjmp	.+40     	; 0x1e4e <LCD_voidSendStr+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e26:	6f 81       	ldd	r22, Y+7	; 0x07
    1e28:	78 85       	ldd	r23, Y+8	; 0x08
    1e2a:	89 85       	ldd	r24, Y+9	; 0x09
    1e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <LCD_voidSendStr+0x11e>
    1e4a:	9a 83       	std	Y+2, r25	; 0x02
    1e4c:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_voidSendStr(u8 s[])
{
		u8 i=0;
		u8 size=strlen(s);
		while(i<size)
    1e4e:	98 89       	ldd	r25, Y+16	; 0x10
    1e50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e52:	98 17       	cp	r25, r24
    1e54:	08 f4       	brcc	.+2      	; 0x1e58 <LCD_voidSendStr+0x130>
    1e56:	7b cf       	rjmp	.-266    	; 0x1d4e <LCD_voidSendStr+0x26>
			{
			    LCD_voidSendChar(s[i]);
				i++;
				_delay_ms(2);
			}
}
    1e58:	62 96       	adiw	r28, 0x12	; 18
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <LCD_voidGoToXY>:
void LCD_voidGoToXY(u8 Copy_u8X,u8  Copy_u8Y)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <LCD_voidGoToXY+0x6>
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <LCD_voidGoToXY+0x8>
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8X)
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	3c 83       	std	Y+4, r19	; 0x04
    1e82:	2b 83       	std	Y+3, r18	; 0x03
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	9c 81       	ldd	r25, Y+4	; 0x04
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	31 f0       	breq	.+12     	; 0x1e98 <LCD_voidGoToXY+0x2e>
    1e8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e90:	21 30       	cpi	r18, 0x01	; 1
    1e92:	31 05       	cpc	r19, r1
    1e94:	31 f0       	breq	.+12     	; 0x1ea2 <LCD_voidGoToXY+0x38>
    1e96:	09 c0       	rjmp	.+18     	; 0x1eaa <LCD_voidGoToXY+0x40>
	{
	case(LCD_u8_LINE0):
	{
		LCD_voidSendCommend((0x80+(Copy_u8Y)));
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	80 58       	subi	r24, 0x80	; 128
    1e9c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LCD_voidSendCommend>
    1ea0:	04 c0       	rjmp	.+8      	; 0x1eaa <LCD_voidGoToXY+0x40>
		break;
	}
	case(LCD_u8_LINE1):
	{
		LCD_voidSendCommend((0xC0+(Copy_u8Y)));
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	80 54       	subi	r24, 0x40	; 64
    1ea6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LCD_voidSendCommend>
		break;
	}
	}
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <LCD_voidClear>:
void LCD_voidClear(void)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	2e 97       	sbiw	r28, 0x0e	; 14
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommend(0b0000000001);
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LCD_voidSendCommend>
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a0 e0       	ldi	r26, 0x00	; 0
    1ed8:	b0 e4       	ldi	r27, 0x40	; 64
    1eda:	8b 87       	std	Y+11, r24	; 0x0b
    1edc:	9c 87       	std	Y+12, r25	; 0x0c
    1ede:	ad 87       	std	Y+13, r26	; 0x0d
    1ee0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	4a ef       	ldi	r20, 0xFA	; 250
    1ef0:	54 e4       	ldi	r21, 0x44	; 68
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	8f 83       	std	Y+7, r24	; 0x07
    1efc:	98 87       	std	Y+8, r25	; 0x08
    1efe:	a9 87       	std	Y+9, r26	; 0x09
    1f00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f02:	6f 81       	ldd	r22, Y+7	; 0x07
    1f04:	78 85       	ldd	r23, Y+8	; 0x08
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e8       	ldi	r20, 0x80	; 128
    1f10:	5f e3       	ldi	r21, 0x3F	; 63
    1f12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f16:	88 23       	and	r24, r24
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <LCD_voidClear+0x6c>
		__ticks = 1;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	8d 83       	std	Y+5, r24	; 0x05
    1f22:	3f c0       	rjmp	.+126    	; 0x1fa2 <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    1f24:	6f 81       	ldd	r22, Y+7	; 0x07
    1f26:	78 85       	ldd	r23, Y+8	; 0x08
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	3f ef       	ldi	r19, 0xFF	; 255
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	57 e4       	ldi	r21, 0x47	; 71
    1f34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	4c f5       	brge	.+82     	; 0x1f8e <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e2       	ldi	r20, 0x20	; 32
    1f4a:	51 e4       	ldi	r21, 0x41	; 65
    1f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	0f c0       	rjmp	.+30     	; 0x1f84 <LCD_voidClear+0xcc>
    1f66:	88 ec       	ldi	r24, 0xC8	; 200
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
    1f6c:	8b 83       	std	Y+3, r24	; 0x03
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <LCD_voidClear+0xba>
    1f76:	9c 83       	std	Y+4, r25	; 0x04
    1f78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	9e 81       	ldd	r25, Y+6	; 0x06
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	69 f7       	brne	.-38     	; 0x1f66 <LCD_voidClear+0xae>
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f90:	78 85       	ldd	r23, Y+8	; 0x08
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
    1fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <LCD_voidClear+0xf6>
    1fb2:	9a 83       	std	Y+2, r25	; 0x02
    1fb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1fb6:	2e 96       	adiw	r28, 0x0e	; 14
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	f8 94       	cli
    1fbc:	de bf       	out	0x3e, r29	; 62
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	cd bf       	out	0x3d, r28	; 61
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <LCD_voidSpecialChar>:
void LCD_voidSpecialChar(u8 Copy_u8Char,u8 *Copy_pu8Pattern)
{
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <LCD_voidSpecialChar+0x6>
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <LCD_voidSpecialChar+0x8>
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	8a 83       	std	Y+2, r24	; 0x02
    1fd6:	7c 83       	std	Y+4, r23	; 0x04
    1fd8:	6b 83       	std	Y+3, r22	; 0x03
	LCD_voidSendCommend(Copy_u8Char);
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LCD_voidSendCommend>
	u8 i;
	for(i=0;i<8;i++)
    1fe0:	19 82       	std	Y+1, r1	; 0x01
    1fe2:	0e c0       	rjmp	.+28     	; 0x2000 <LCD_voidSpecialChar+0x38>
	{
		LCD_voidSendChar(Copy_pu8Pattern[i]);
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	9c 81       	ldd	r25, Y+4	; 0x04
    1fee:	fc 01       	movw	r30, r24
    1ff0:	e2 0f       	add	r30, r18
    1ff2:	f3 1f       	adc	r31, r19
    1ff4:	80 81       	ld	r24, Z
    1ff6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_voidSendChar>
}
void LCD_voidSpecialChar(u8 Copy_u8Char,u8 *Copy_pu8Pattern)
{
	LCD_voidSendCommend(Copy_u8Char);
	u8 i;
	for(i=0;i<8;i++)
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	8f 5f       	subi	r24, 0xFF	; 255
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	88 30       	cpi	r24, 0x08	; 8
    2004:	78 f3       	brcs	.-34     	; 0x1fe4 <LCD_voidSpecialChar+0x1c>
	{
		LCD_voidSendChar(Copy_pu8Pattern[i]);
	}
}
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <LCD_voidShift>:
void LCD_voidShift(u8 Copy_u8Direction)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	00 d0       	rcall	.+0      	; 0x201a <LCD_voidShift+0x6>
    201a:	0f 92       	push	r0
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Direction)
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	3b 83       	std	Y+3, r19	; 0x03
    202a:	2a 83       	std	Y+2, r18	; 0x02
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	9b 81       	ldd	r25, Y+3	; 0x03
    2030:	88 31       	cpi	r24, 0x18	; 24
    2032:	91 05       	cpc	r25, r1
    2034:	31 f0       	breq	.+12     	; 0x2042 <LCD_voidShift+0x2e>
    2036:	2a 81       	ldd	r18, Y+2	; 0x02
    2038:	3b 81       	ldd	r19, Y+3	; 0x03
    203a:	2c 31       	cpi	r18, 0x1C	; 28
    203c:	31 05       	cpc	r19, r1
    203e:	29 f0       	breq	.+10     	; 0x204a <LCD_voidShift+0x36>
    2040:	07 c0       	rjmp	.+14     	; 0x2050 <LCD_voidShift+0x3c>
	{
	case(LCD_u8_LEFT):
	    {
		    LCD_voidSendCommend(0b0000011000);
    2042:	88 e1       	ldi	r24, 0x18	; 24
    2044:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LCD_voidSendCommend>
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <LCD_voidShift+0x3c>
		    break ;
	    }
	case(LCD_u8_RIGHT):
		{
		    LCD_voidSendCommend(0b0000011100);
    204a:	8c e1       	ldi	r24, 0x1C	; 28
    204c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LCD_voidSendCommend>
			break ;
		}
	}
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <LCD_voidSendNum>:
void LCD_voidSendNum(s16 Copy_u16Number)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	29 97       	sbiw	r28, 0x09	; 9
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	98 87       	std	Y+8, r25	; 0x08
    2072:	8f 83       	std	Y+7, r24	; 0x07
	s8 count=0,reminder;
    2074:	1e 82       	std	Y+6, r1	; 0x06
	s16 Local_u16Reversed=0;
    2076:	1c 82       	std	Y+4, r1	; 0x04
    2078:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_u16Number==0)
    207a:	8f 81       	ldd	r24, Y+7	; 0x07
    207c:	98 85       	ldd	r25, Y+8	; 0x08
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	21 f4       	brne	.+8      	; 0x208a <LCD_voidSendNum+0x2e>
	{
		LCD_voidSendChar(0+48);
    2082:	80 e3       	ldi	r24, 0x30	; 48
    2084:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_voidSendChar>
    2088:	0e c0       	rjmp	.+28     	; 0x20a6 <LCD_voidSendNum+0x4a>
	}
	else if(Copy_u16Number<0)
    208a:	8f 81       	ldd	r24, Y+7	; 0x07
    208c:	98 85       	ldd	r25, Y+8	; 0x08
    208e:	99 23       	and	r25, r25
    2090:	54 f4       	brge	.+20     	; 0x20a6 <LCD_voidSendNum+0x4a>
	{
		LCD_voidSendChar('-');
    2092:	8d e2       	ldi	r24, 0x2D	; 45
    2094:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_voidSendChar>
		Copy_u16Number*=-1;
    2098:	8f 81       	ldd	r24, Y+7	; 0x07
    209a:	98 85       	ldd	r25, Y+8	; 0x08
    209c:	90 95       	com	r25
    209e:	81 95       	neg	r24
    20a0:	9f 4f       	sbci	r25, 0xFF	; 255
    20a2:	98 87       	std	Y+8, r25	; 0x08
    20a4:	8f 83       	std	Y+7, r24	; 0x07
	}
	s16 test=Copy_u16Number;
    20a6:	8f 81       	ldd	r24, Y+7	; 0x07
    20a8:	98 85       	ldd	r25, Y+8	; 0x08
    20aa:	9a 83       	std	Y+2, r25	; 0x02
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	29 c0       	rjmp	.+82     	; 0x2102 <LCD_voidSendNum+0xa6>
	while(test)
	{
	reminder=test % 10;
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	2a e0       	ldi	r18, 0x0A	; 10
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	b9 01       	movw	r22, r18
    20ba:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__divmodhi4>
    20be:	8d 83       	std	Y+5, r24	; 0x05
	Local_u16Reversed=(Local_u16Reversed*10)+reminder;
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	9c 01       	movw	r18, r24
    20c6:	22 0f       	add	r18, r18
    20c8:	33 1f       	adc	r19, r19
    20ca:	c9 01       	movw	r24, r18
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	28 0f       	add	r18, r24
    20d6:	39 1f       	adc	r19, r25
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	99 27       	eor	r25, r25
    20dc:	87 fd       	sbrc	r24, 7
    20de:	90 95       	com	r25
    20e0:	82 0f       	add	r24, r18
    20e2:	93 1f       	adc	r25, r19
    20e4:	9c 83       	std	Y+4, r25	; 0x04
    20e6:	8b 83       	std	Y+3, r24	; 0x03
	test/=10;
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	2a e0       	ldi	r18, 0x0A	; 10
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	b9 01       	movw	r22, r18
    20f2:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__divmodhi4>
    20f6:	cb 01       	movw	r24, r22
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
	count++;
    20fc:	8e 81       	ldd	r24, Y+6	; 0x06
    20fe:	8f 5f       	subi	r24, 0xFF	; 255
    2100:	8e 83       	std	Y+6, r24	; 0x06
	{
		LCD_voidSendChar('-');
		Copy_u16Number*=-1;
	}
	s16 test=Copy_u16Number;
	while(test)
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	99 f6       	brne	.-90     	; 0x20b0 <LCD_voidSendNum+0x54>
    210a:	16 c0       	rjmp	.+44     	; 0x2138 <LCD_voidSendNum+0xdc>
	test/=10;
	count++;
	}
	while(count--)
	{
	reminder=Local_u16Reversed % 10;
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	2a e0       	ldi	r18, 0x0A	; 10
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	b9 01       	movw	r22, r18
    2116:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__divmodhi4>
    211a:	8d 83       	std	Y+5, r24	; 0x05
	LCD_voidSendChar(reminder+48);
    211c:	8d 81       	ldd	r24, Y+5	; 0x05
    211e:	80 5d       	subi	r24, 0xD0	; 208
    2120:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <LCD_voidSendChar>
	Local_u16Reversed/=10;
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	2a e0       	ldi	r18, 0x0A	; 10
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	b9 01       	movw	r22, r18
    212e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__divmodhi4>
    2132:	cb 01       	movw	r24, r22
    2134:	9c 83       	std	Y+4, r25	; 0x04
    2136:	8b 83       	std	Y+3, r24	; 0x03
	reminder=test % 10;
	Local_u16Reversed=(Local_u16Reversed*10)+reminder;
	test/=10;
	count++;
	}
	while(count--)
    2138:	8e 81       	ldd	r24, Y+6	; 0x06
    213a:	89 87       	std	Y+9, r24	; 0x09
    213c:	89 85       	ldd	r24, Y+9	; 0x09
    213e:	88 23       	and	r24, r24
    2140:	11 f0       	breq	.+4      	; 0x2146 <LCD_voidSendNum+0xea>
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	89 87       	std	Y+9, r24	; 0x09
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9e 81       	ldd	r25, Y+6	; 0x06
    214a:	91 50       	subi	r25, 0x01	; 1
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	88 23       	and	r24, r24
    2150:	e9 f6       	brne	.-70     	; 0x210c <LCD_voidSendNum+0xb0>
	reminder=Local_u16Reversed % 10;
	LCD_voidSendChar(reminder+48);
	Local_u16Reversed/=10;

	}
}
    2152:	29 96       	adiw	r28, 0x09	; 9
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <main>:
void Task_3(void);
void Task_4(void);
void Task_5(void);
void Suspend_LCD(void);
int main()
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    // Initialize necessary modules
	DIO_u8IntialDirection();
    216c:	0e 94 cb 11 	call	0x2396	; 0x2396 <DIO_u8IntialDirection>
	DIO_u8IntialValue();
    2170:	0e 94 b6 11 	call	0x236c	; 0x236c <DIO_u8IntialValue>
	LCD_voidInitial();
    2174:	0e 94 d7 09 	call	0x13ae	; 0x13ae <LCD_voidInitial>
	LCD_voidSendStr("Farida");
    2178:	80 e6       	ldi	r24, 0x60	; 96
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <LCD_voidSendStr>
	TMR1_voidInit();
    2180:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <TMR1_voidInit>
	TMR1_voidSetICR(19999);
    2184:	8f e1       	ldi	r24, 0x1F	; 31
    2186:	9e e4       	ldi	r25, 0x4E	; 78
    2188:	0e 94 40 18 	call	0x3080	; 0x3080 <TMR1_voidSetICR>

	DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN2,DIO_u8_PIN_HIGH);
    218c:	83 e0       	ldi	r24, 0x03	; 3
    218e:	62 e0       	ldi	r22, 0x02	; 2
    2190:	41 e0       	ldi	r20, 0x01	; 1
    2192:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
	EXTINT_voidEnable(EXTINT_INT0,EXTINT_FALLING_EDGE);
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EXTINT_voidEnable>
	EXTINT_voidSetCallBack(&Suspend_LCD,EXTINT_INT0);
    219e:	89 e9       	ldi	r24, 0x99	; 153
    21a0:	91 e1       	ldi	r25, 0x11	; 17
    21a2:	61 e0       	ldi	r22, 0x01	; 1
    21a4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <EXTINT_voidSetCallBack>

    // Create tasks for the RTOS
	RTOS_voidCreateTask(0,1000,&Task_1);
    21a8:	24 e0       	ldi	r18, 0x04	; 4
    21aa:	31 e1       	ldi	r19, 0x11	; 17
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	48 ee       	ldi	r20, 0xE8	; 232
    21b0:	53 e0       	ldi	r21, 0x03	; 3
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	70 e0       	ldi	r23, 0x00	; 0
    21b6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <RTOS_voidCreateTask>
	RTOS_voidCreateTask(1,2000,&Task_2);
    21ba:	2f e1       	ldi	r18, 0x1F	; 31
    21bc:	31 e1       	ldi	r19, 0x11	; 17
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	40 ed       	ldi	r20, 0xD0	; 208
    21c2:	57 e0       	ldi	r21, 0x07	; 7
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	70 e0       	ldi	r23, 0x00	; 0
    21c8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <RTOS_voidCreateTask>
	RTOS_voidCreateTask(2,5000,&Task_3);
    21cc:	2a e3       	ldi	r18, 0x3A	; 58
    21ce:	31 e1       	ldi	r19, 0x11	; 17
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	48 e8       	ldi	r20, 0x88	; 136
    21d4:	53 e1       	ldi	r21, 0x13	; 19
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <RTOS_voidCreateTask>
	RTOS_voidCreateTask(3,300 ,&Task_4);
    21de:	25 e5       	ldi	r18, 0x55	; 85
    21e0:	31 e1       	ldi	r19, 0x11	; 17
    21e2:	83 e0       	ldi	r24, 0x03	; 3
    21e4:	4c e2       	ldi	r20, 0x2C	; 44
    21e6:	51 e0       	ldi	r21, 0x01	; 1
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <RTOS_voidCreateTask>
	RTOS_voidCreateTask(4,1000,&Task_5);
    21f0:	2a e7       	ldi	r18, 0x7A	; 122
    21f2:	31 e1       	ldi	r19, 0x11	; 17
    21f4:	84 e0       	ldi	r24, 0x04	; 4
    21f6:	48 ee       	ldi	r20, 0xE8	; 232
    21f8:	53 e0       	ldi	r21, 0x03	; 3
    21fa:	60 e0       	ldi	r22, 0x00	; 0
    21fc:	70 e0       	ldi	r23, 0x00	; 0
    21fe:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <RTOS_voidCreateTask>

    // Start the RTOS scheduler
	RTOS_voidStart();
    2202:	0e 94 5d 08 	call	0x10ba	; 0x10ba <RTOS_voidStart>
    2206:	ff cf       	rjmp	.-2      	; 0x2206 <main+0xa2>

00002208 <Task_1>:
	return 0;
}

// Task definitions
void Task_1(void)
{
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	if(flag == 0)
    2210:	80 91 95 00 	lds	r24, 0x0095
    2214:	88 23       	and	r24, r24
    2216:	49 f4       	brne	.+18     	; 0x222a <Task_1+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_PIN_HIGH);
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	41 e0       	ldi	r20, 0x01	; 1
    221e:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
		flag = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	80 93 95 00 	sts	0x0095, r24
    2228:	07 c0       	rjmp	.+14     	; 0x2238 <Task_1+0x30>
	}
	else
	{
		flag = 0;
    222a:	10 92 95 00 	sts	0x0095, r1
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_PIN_LOW);
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
	}
}
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <Task_2>:
void Task_2(void)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	if(flag == 0)
    2246:	80 91 96 00 	lds	r24, 0x0096
    224a:	88 23       	and	r24, r24
    224c:	49 f4       	brne	.+18     	; 0x2260 <Task_2+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_PIN_HIGH);
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	61 e0       	ldi	r22, 0x01	; 1
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
		flag = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	80 93 96 00 	sts	0x0096, r24
    225e:	07 c0       	rjmp	.+14     	; 0x226e <Task_2+0x30>
	}
	else
	{
		flag = 0;
    2260:	10 92 96 00 	sts	0x0096, r1
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_PIN_LOW);
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	61 e0       	ldi	r22, 0x01	; 1
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
	}
}
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <Task_3>:
void Task_3(void)
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	if(flag == 0)
    227c:	80 91 97 00 	lds	r24, 0x0097
    2280:	88 23       	and	r24, r24
    2282:	49 f4       	brne	.+18     	; 0x2296 <Task_3+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_PIN_HIGH);
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	62 e0       	ldi	r22, 0x02	; 2
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
		flag = 1;
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	80 93 97 00 	sts	0x0097, r24
    2294:	07 c0       	rjmp	.+14     	; 0x22a4 <Task_3+0x30>
	}
	else
	{
		flag = 0;
    2296:	10 92 97 00 	sts	0x0097, r1
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_PIN_LOW);
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	62 e0       	ldi	r22, 0x02	; 2
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8SetPinValue>
	}
}
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <Task_4>:
void Task_4(void)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
	static u16 counter = 999;
	counter+=100;
    22b2:	80 91 6f 00 	lds	r24, 0x006F
    22b6:	90 91 70 00 	lds	r25, 0x0070
    22ba:	8c 59       	subi	r24, 0x9C	; 156
    22bc:	9f 4f       	sbci	r25, 0xFF	; 255
    22be:	90 93 70 00 	sts	0x0070, r25
    22c2:	80 93 6f 00 	sts	0x006F, r24
	if(counter == 1999)
    22c6:	80 91 6f 00 	lds	r24, 0x006F
    22ca:	90 91 70 00 	lds	r25, 0x0070
    22ce:	27 e0       	ldi	r18, 0x07	; 7
    22d0:	8f 3c       	cpi	r24, 0xCF	; 207
    22d2:	92 07       	cpc	r25, r18
    22d4:	31 f4       	brne	.+12     	; 0x22e2 <Task_4+0x38>
	{
		counter = 999;
    22d6:	87 ee       	ldi	r24, 0xE7	; 231
    22d8:	93 e0       	ldi	r25, 0x03	; 3
    22da:	90 93 70 00 	sts	0x0070, r25
    22de:	80 93 6f 00 	sts	0x006F, r24
	}
	TMR1_voidSetCompareMatch(counter);
    22e2:	80 91 6f 00 	lds	r24, 0x006F
    22e6:	90 91 70 00 	lds	r25, 0x0070
    22ea:	0e 94 2e 18 	call	0x305c	; 0x305c <TMR1_voidSetCompareMatch>
}
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <Task_5>:
void Task_5(void)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
	static u8 counter = 0;
	counter++;
    22fc:	80 91 98 00 	lds	r24, 0x0098
    2300:	8f 5f       	subi	r24, 0xFF	; 255
    2302:	80 93 98 00 	sts	0x0098, r24
	LCD_voidShift(LCD_u8_RIGHT);
    2306:	8c e1       	ldi	r24, 0x1C	; 28
    2308:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidShift>
	if(counter == 9)
    230c:	80 91 98 00 	lds	r24, 0x0098
    2310:	89 30       	cpi	r24, 0x09	; 9
    2312:	61 f4       	brne	.+24     	; 0x232c <Task_5+0x38>
	{
		LCD_voidClear();
    2314:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_voidClear>
		LCD_voidGoToXY(LCD_u8_LINE0,0);
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <LCD_voidGoToXY>
		LCD_voidSendStr("Farida");
    2320:	80 e6       	ldi	r24, 0x60	; 96
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <LCD_voidSendStr>
		counter = 0;
    2328:	10 92 98 00 	sts	0x0098, r1
	}
}
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <Suspend_LCD>:

void Suspend_LCD(void)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter =0 ;
	Local_u8Counter++;
    233a:	80 91 99 00 	lds	r24, 0x0099
    233e:	8f 5f       	subi	r24, 0xFF	; 255
    2340:	80 93 99 00 	sts	0x0099, r24
	if(Local_u8Counter == 1)
    2344:	80 91 99 00 	lds	r24, 0x0099
    2348:	81 30       	cpi	r24, 0x01	; 1
    234a:	21 f4       	brne	.+8      	; 0x2354 <Suspend_LCD+0x22>
	{
		RTOS_voidPauseTask(4);
    234c:	84 e0       	ldi	r24, 0x04	; 4
    234e:	0e 94 2f 09 	call	0x125e	; 0x125e <RTOS_voidPauseTask>
    2352:	09 c0       	rjmp	.+18     	; 0x2366 <Suspend_LCD+0x34>

	}
	else if(Local_u8Counter == 2)
    2354:	80 91 99 00 	lds	r24, 0x0099
    2358:	82 30       	cpi	r24, 0x02	; 2
    235a:	29 f4       	brne	.+10     	; 0x2366 <Suspend_LCD+0x34>
	{
		RTOS_voidResumeTask(4);
    235c:	84 e0       	ldi	r24, 0x04	; 4
    235e:	0e 94 48 09 	call	0x1290	; 0x1290 <RTOS_voidResumeTask>
		Local_u8Counter = 0 ;
    2362:	10 92 99 00 	sts	0x0099, r1
	}
	else
	{

	}
}
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <DIO_u8IntialValue>:
#include "private.h"
#include "config.h"
#include "interface.h"

void DIO_u8IntialValue    (void)
{
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
	PORTA_u8_REG = CONC(DIO_u8_PORTA_PIN7_INITIAL_VALUE ,DIO_u8_PORTA_PIN6_INITIAL_VALUE,DIO_u8_PORTA_PIN5_INITIAL_VALUE,DIO_u8_PORTA_PIN4_INITIAL_VALUE,
    2374:	eb e3       	ldi	r30, 0x3B	; 59
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	88 ef       	ldi	r24, 0xF8	; 248
    237a:	80 83       	st	Z, r24
			            DIO_u8_PORTA_PIN3_INITIAL_VALUE,DIO_u8_PORTA_PIN2_INITIAL_VALUE,DIO_u8_PORTA_PIN1_INITIAL_VALUE,DIO_u8_PORTA_PIN0_INITIAL_VALUE);
	PORTB_u8_REG = CONC(DIO_u8_PORTB_PIN7_INITIAL_VALUE ,DIO_u8_PORTB_PIN6_INITIAL_VALUE,DIO_u8_PORTB_PIN5_INITIAL_VALUE,DIO_u8_PORTB_PIN4_INITIAL_VALUE,
    237c:	e8 e3       	ldi	r30, 0x38	; 56
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	10 82       	st	Z, r1
                        DIO_u8_PORTB_PIN3_INITIAL_VALUE,DIO_u8_PORTB_PIN2_INITIAL_VALUE,DIO_u8_PORTB_PIN1_INITIAL_VALUE,DIO_u8_PORTB_PIN0_INITIAL_VALUE);
	PORTC_u8_REG = CONC(DIO_u8_PORTC_PIN7_INITIAL_VALUE ,DIO_u8_PORTC_PIN6_INITIAL_VALUE,DIO_u8_PORTC_PIN5_INITIAL_VALUE,DIO_u8_PORTC_PIN4_INITIAL_VALUE,
    2382:	e5 e3       	ldi	r30, 0x35	; 53
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	10 82       	st	Z, r1
                         DIO_u8_PORTC_PIN3_INITIAL_VALUE,DIO_u8_PORTC_PIN2_INITIAL_VALUE,DIO_u8_PORTC_PIN1_INITIAL_VALUE,DIO_u8_PORTC_PIN0_INITIAL_VALUE);
	PORTD_u8_REG = CONC(DIO_u8_PORTD_PIN7_INITIAL_VALUE ,DIO_u8_PORTD_PIN6_INITIAL_VALUE,DIO_u8_PORTD_PIN5_INITIAL_VALUE,DIO_u8_PORTD_PIN4_INITIAL_VALUE,
    2388:	e2 e3       	ldi	r30, 0x32	; 50
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	80 83       	st	Z, r24
                         DIO_u8_PORTD_PIN3_INITIAL_VALUE,DIO_u8_PORTD_PIN2_INITIAL_VALUE,DIO_u8_PORTD_PIN1_INITIAL_VALUE,DIO_u8_PORTD_PIN0_INITIAL_VALUE);
}
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <DIO_u8IntialDirection>:
void DIO_u8IntialDirection    (void)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
	DDRA_u8_REG = CONC(DIO_u8_PORTA_PIN7_INITIAL_DIRECTION,DIO_u8_PORTA_PIN6_INITIAL_DIRECTION,DIO_u8_PORTA_PIN5_INITIAL_DIRECTION,DIO_u8_PORTA_PIN4_INITIAL_DIRECTION,
    239e:	ea e3       	ldi	r30, 0x3A	; 58
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	8f e0       	ldi	r24, 0x0F	; 15
    23a4:	80 83       	st	Z, r24
			           DIO_u8_PORTA_PIN3_INITIAL_DIRECTION,DIO_u8_PORTA_PIN2_INITIAL_DIRECTION,DIO_u8_PORTA_PIN1_INITIAL_DIRECTION,DIO_u8_PORTA_PIN0_INITIAL_DIRECTION);
	DDRB_u8_REG = CONC(DIO_u8_PORTB_PIN7_INITIAL_DIRECTION,DIO_u8_PORTB_PIN6_INITIAL_DIRECTION,DIO_u8_PORTB_PIN5_INITIAL_DIRECTION,DIO_u8_PORTB_PIN4_INITIAL_DIRECTION,
    23a6:	e7 e3       	ldi	r30, 0x37	; 55
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	8f ef       	ldi	r24, 0xFF	; 255
    23ac:	80 83       	st	Z, r24
	                   DIO_u8_PORTB_PIN3_INITIAL_DIRECTION,DIO_u8_PORTB_PIN2_INITIAL_DIRECTION,DIO_u8_PORTB_PIN1_INITIAL_DIRECTION,DIO_u8_PORTB_PIN0_INITIAL_DIRECTION);
	DDRC_u8_REG = CONC(DIO_u8_PORTC_PIN7_INITIAL_DIRECTION,DIO_u8_PORTC_PIN6_INITIAL_DIRECTION,DIO_u8_PORTC_PIN5_INITIAL_DIRECTION,DIO_u8_PORTC_PIN4_INITIAL_DIRECTION,
    23ae:	e4 e3       	ldi	r30, 0x34	; 52
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	8f ef       	ldi	r24, 0xFF	; 255
    23b4:	80 83       	st	Z, r24
	                   DIO_u8_PORTC_PIN3_INITIAL_DIRECTION,DIO_u8_PORTC_PIN2_INITIAL_DIRECTION,DIO_u8_PORTC_PIN1_INITIAL_DIRECTION,DIO_u8_PORTC_PIN0_INITIAL_DIRECTION);
	DDRD_u8_REG = CONC(DIO_u8_PORTD_PIN7_INITIAL_DIRECTION,DIO_u8_PORTD_PIN6_INITIAL_DIRECTION,DIO_u8_PORTD_PIN5_INITIAL_DIRECTION,DIO_u8_PORTD_PIN4_INITIAL_DIRECTION,
    23b6:	e1 e3       	ldi	r30, 0x31	; 49
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	8f ef       	ldi	r24, 0xFF	; 255
    23bc:	80 83       	st	Z, r24
	                   DIO_u8_PORTD_PIN3_INITIAL_DIRECTION,DIO_u8_PORTD_PIN2_INITIAL_DIRECTION,DIO_u8_PORTD_PIN1_INITIAL_DIRECTION,DIO_u8_PORTD_PIN0_INITIAL_DIRECTION);
}
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinDirection)
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	2e 97       	sbiw	r28, 0x0e	; 14
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	cd bf       	out	0x3d, r28	; 61
    23d8:	8a 83       	std	Y+2, r24	; 0x02
    23da:	6b 83       	std	Y+3, r22	; 0x03
    23dc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnedState=OK;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_u8PinDirection <= DIO_u8_PIN_OUTPUT))                                                     
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	84 30       	cpi	r24, 0x04	; 4
    23e6:	08 f0       	brcs	.+2      	; 0x23ea <DIO_u8SetPinDirection+0x26>
    23e8:	09 c1       	rjmp	.+530    	; 0x25fc <DIO_u8SetPinDirection+0x238>
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	88 30       	cpi	r24, 0x08	; 8
    23ee:	08 f0       	brcs	.+2      	; 0x23f2 <DIO_u8SetPinDirection+0x2e>
    23f0:	05 c1       	rjmp	.+522    	; 0x25fc <DIO_u8SetPinDirection+0x238>
    23f2:	8c 81       	ldd	r24, Y+4	; 0x04
    23f4:	82 30       	cpi	r24, 0x02	; 2
    23f6:	08 f0       	brcs	.+2      	; 0x23fa <DIO_u8SetPinDirection+0x36>
    23f8:	01 c1       	rjmp	.+514    	; 0x25fc <DIO_u8SetPinDirection+0x238>
	{
		switch(Copy_u8PortId)
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	28 2f       	mov	r18, r24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	3e 87       	std	Y+14, r19	; 0x0e
    2402:	2d 87       	std	Y+13, r18	; 0x0d
    2404:	8d 85       	ldd	r24, Y+13	; 0x0d
    2406:	9e 85       	ldd	r25, Y+14	; 0x0e
    2408:	81 30       	cpi	r24, 0x01	; 1
    240a:	91 05       	cpc	r25, r1
    240c:	09 f4       	brne	.+2      	; 0x2410 <DIO_u8SetPinDirection+0x4c>
    240e:	4f c0       	rjmp	.+158    	; 0x24ae <DIO_u8SetPinDirection+0xea>
    2410:	2d 85       	ldd	r18, Y+13	; 0x0d
    2412:	3e 85       	ldd	r19, Y+14	; 0x0e
    2414:	22 30       	cpi	r18, 0x02	; 2
    2416:	31 05       	cpc	r19, r1
    2418:	2c f4       	brge	.+10     	; 0x2424 <DIO_u8SetPinDirection+0x60>
    241a:	8d 85       	ldd	r24, Y+13	; 0x0d
    241c:	9e 85       	ldd	r25, Y+14	; 0x0e
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	71 f0       	breq	.+28     	; 0x243e <DIO_u8SetPinDirection+0x7a>
    2422:	ed c0       	rjmp	.+474    	; 0x25fe <DIO_u8SetPinDirection+0x23a>
    2424:	2d 85       	ldd	r18, Y+13	; 0x0d
    2426:	3e 85       	ldd	r19, Y+14	; 0x0e
    2428:	22 30       	cpi	r18, 0x02	; 2
    242a:	31 05       	cpc	r19, r1
    242c:	09 f4       	brne	.+2      	; 0x2430 <DIO_u8SetPinDirection+0x6c>
    242e:	77 c0       	rjmp	.+238    	; 0x251e <DIO_u8SetPinDirection+0x15a>
    2430:	8d 85       	ldd	r24, Y+13	; 0x0d
    2432:	9e 85       	ldd	r25, Y+14	; 0x0e
    2434:	83 30       	cpi	r24, 0x03	; 3
    2436:	91 05       	cpc	r25, r1
    2438:	09 f4       	brne	.+2      	; 0x243c <DIO_u8SetPinDirection+0x78>
    243a:	a9 c0       	rjmp	.+338    	; 0x258e <DIO_u8SetPinDirection+0x1ca>
    243c:	e0 c0       	rjmp	.+448    	; 0x25fe <DIO_u8SetPinDirection+0x23a>
		{
			case (DIO_u8_PORTA):
			{
				switch(Copy_u8PinDirection)
    243e:	8c 81       	ldd	r24, Y+4	; 0x04
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	3c 87       	std	Y+12, r19	; 0x0c
    2446:	2b 87       	std	Y+11, r18	; 0x0b
    2448:	8b 85       	ldd	r24, Y+11	; 0x0b
    244a:	9c 85       	ldd	r25, Y+12	; 0x0c
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	d1 f0       	breq	.+52     	; 0x2484 <DIO_u8SetPinDirection+0xc0>
    2450:	2b 85       	ldd	r18, Y+11	; 0x0b
    2452:	3c 85       	ldd	r19, Y+12	; 0x0c
    2454:	21 30       	cpi	r18, 0x01	; 1
    2456:	31 05       	cpc	r19, r1
    2458:	09 f0       	breq	.+2      	; 0x245c <DIO_u8SetPinDirection+0x98>
    245a:	d1 c0       	rjmp	.+418    	; 0x25fe <DIO_u8SetPinDirection+0x23a>
				{
					case(DIO_u8_PIN_OUTPUT):
					{
						SET_BIT(DDRA_u8_REG,Copy_u8PinId);
    245c:	aa e3       	ldi	r26, 0x3A	; 58
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	ea e3       	ldi	r30, 0x3A	; 58
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	48 2f       	mov	r20, r24
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	02 2e       	mov	r0, r18
    2474:	02 c0       	rjmp	.+4      	; 0x247a <DIO_u8SetPinDirection+0xb6>
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	0a 94       	dec	r0
    247c:	e2 f7       	brpl	.-8      	; 0x2476 <DIO_u8SetPinDirection+0xb2>
    247e:	84 2b       	or	r24, r20
    2480:	8c 93       	st	X, r24
    2482:	bd c0       	rjmp	.+378    	; 0x25fe <DIO_u8SetPinDirection+0x23a>
						break;
					}
					case(DIO_u8_PIN_INPUT):
					{
						CLEAR_BIT(DDRA_u8_REG,Copy_u8PinId);
    2484:	aa e3       	ldi	r26, 0x3A	; 58
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	ea e3       	ldi	r30, 0x3A	; 58
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	48 2f       	mov	r20, r24
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	02 2e       	mov	r0, r18
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <DIO_u8SetPinDirection+0xde>
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	0a 94       	dec	r0
    24a4:	e2 f7       	brpl	.-8      	; 0x249e <DIO_u8SetPinDirection+0xda>
    24a6:	80 95       	com	r24
    24a8:	84 23       	and	r24, r20
    24aa:	8c 93       	st	X, r24
    24ac:	a8 c0       	rjmp	.+336    	; 0x25fe <DIO_u8SetPinDirection+0x23a>
				}
				break;
			}
			case (DIO_u8_PORTB):
			{
				switch(Copy_u8PinDirection)
    24ae:	8c 81       	ldd	r24, Y+4	; 0x04
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	3a 87       	std	Y+10, r19	; 0x0a
    24b6:	29 87       	std	Y+9, r18	; 0x09
    24b8:	89 85       	ldd	r24, Y+9	; 0x09
    24ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	d1 f0       	breq	.+52     	; 0x24f4 <DIO_u8SetPinDirection+0x130>
    24c0:	29 85       	ldd	r18, Y+9	; 0x09
    24c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    24c4:	21 30       	cpi	r18, 0x01	; 1
    24c6:	31 05       	cpc	r19, r1
    24c8:	09 f0       	breq	.+2      	; 0x24cc <DIO_u8SetPinDirection+0x108>
    24ca:	99 c0       	rjmp	.+306    	; 0x25fe <DIO_u8SetPinDirection+0x23a>
				{
					case (DIO_u8_PIN_OUTPUT):
					{
						SET_BIT(DDRB_u8_REG,Copy_u8PinId);
    24cc:	a7 e3       	ldi	r26, 0x37	; 55
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	e7 e3       	ldi	r30, 0x37	; 55
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	48 2f       	mov	r20, r24
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	02 2e       	mov	r0, r18
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <DIO_u8SetPinDirection+0x126>
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	0a 94       	dec	r0
    24ec:	e2 f7       	brpl	.-8      	; 0x24e6 <DIO_u8SetPinDirection+0x122>
    24ee:	84 2b       	or	r24, r20
    24f0:	8c 93       	st	X, r24
    24f2:	85 c0       	rjmp	.+266    	; 0x25fe <DIO_u8SetPinDirection+0x23a>
						break;
					}
					case(DIO_u8_PIN_INPUT):
					{
						CLEAR_BIT(DDRB_u8_REG,Copy_u8PinId);
    24f4:	a7 e3       	ldi	r26, 0x37	; 55
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e7 e3       	ldi	r30, 0x37	; 55
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	48 2f       	mov	r20, r24
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	28 2f       	mov	r18, r24
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	02 2e       	mov	r0, r18
    250c:	02 c0       	rjmp	.+4      	; 0x2512 <DIO_u8SetPinDirection+0x14e>
    250e:	88 0f       	add	r24, r24
    2510:	99 1f       	adc	r25, r25
    2512:	0a 94       	dec	r0
    2514:	e2 f7       	brpl	.-8      	; 0x250e <DIO_u8SetPinDirection+0x14a>
    2516:	80 95       	com	r24
    2518:	84 23       	and	r24, r20
    251a:	8c 93       	st	X, r24
    251c:	70 c0       	rjmp	.+224    	; 0x25fe <DIO_u8SetPinDirection+0x23a>
				}
				break;
			}
			case(DIO_u8_PORTC):
			{
				switch(Copy_u8PinDirection)
    251e:	8c 81       	ldd	r24, Y+4	; 0x04
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	38 87       	std	Y+8, r19	; 0x08
    2526:	2f 83       	std	Y+7, r18	; 0x07
    2528:	8f 81       	ldd	r24, Y+7	; 0x07
    252a:	98 85       	ldd	r25, Y+8	; 0x08
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	d1 f0       	breq	.+52     	; 0x2564 <DIO_u8SetPinDirection+0x1a0>
    2530:	2f 81       	ldd	r18, Y+7	; 0x07
    2532:	38 85       	ldd	r19, Y+8	; 0x08
    2534:	21 30       	cpi	r18, 0x01	; 1
    2536:	31 05       	cpc	r19, r1
    2538:	09 f0       	breq	.+2      	; 0x253c <DIO_u8SetPinDirection+0x178>
    253a:	61 c0       	rjmp	.+194    	; 0x25fe <DIO_u8SetPinDirection+0x23a>
				{
					case(DIO_u8_PIN_OUTPUT):
					{
						SET_BIT(DDRC_u8_REG,Copy_u8PinId);
    253c:	a4 e3       	ldi	r26, 0x34	; 52
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e4 e3       	ldi	r30, 0x34	; 52
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	48 2f       	mov	r20, r24
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	02 2e       	mov	r0, r18
    2554:	02 c0       	rjmp	.+4      	; 0x255a <DIO_u8SetPinDirection+0x196>
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	0a 94       	dec	r0
    255c:	e2 f7       	brpl	.-8      	; 0x2556 <DIO_u8SetPinDirection+0x192>
    255e:	84 2b       	or	r24, r20
    2560:	8c 93       	st	X, r24
    2562:	4d c0       	rjmp	.+154    	; 0x25fe <DIO_u8SetPinDirection+0x23a>
						break;
					}
					case(DIO_u8_PIN_INPUT):
					{
						CLEAR_BIT(DDRC_u8_REG,Copy_u8PinId);
    2564:	a4 e3       	ldi	r26, 0x34	; 52
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	e4 e3       	ldi	r30, 0x34	; 52
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	48 2f       	mov	r20, r24
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	02 2e       	mov	r0, r18
    257c:	02 c0       	rjmp	.+4      	; 0x2582 <DIO_u8SetPinDirection+0x1be>
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	0a 94       	dec	r0
    2584:	e2 f7       	brpl	.-8      	; 0x257e <DIO_u8SetPinDirection+0x1ba>
    2586:	80 95       	com	r24
    2588:	84 23       	and	r24, r20
    258a:	8c 93       	st	X, r24
    258c:	38 c0       	rjmp	.+112    	; 0x25fe <DIO_u8SetPinDirection+0x23a>
				}
				break;
			}
			case(DIO_u8_PORTD):
			{
				switch(Copy_u8PinDirection)
    258e:	8c 81       	ldd	r24, Y+4	; 0x04
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	3e 83       	std	Y+6, r19	; 0x06
    2596:	2d 83       	std	Y+5, r18	; 0x05
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	9e 81       	ldd	r25, Y+6	; 0x06
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	c9 f0       	breq	.+50     	; 0x25d2 <DIO_u8SetPinDirection+0x20e>
    25a0:	2d 81       	ldd	r18, Y+5	; 0x05
    25a2:	3e 81       	ldd	r19, Y+6	; 0x06
    25a4:	21 30       	cpi	r18, 0x01	; 1
    25a6:	31 05       	cpc	r19, r1
    25a8:	51 f5       	brne	.+84     	; 0x25fe <DIO_u8SetPinDirection+0x23a>
				{
					case(DIO_u8_PIN_OUTPUT):
					{
						SET_BIT(DDRD_u8_REG,Copy_u8PinId);
    25aa:	a1 e3       	ldi	r26, 0x31	; 49
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e1 e3       	ldi	r30, 0x31	; 49
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	48 2f       	mov	r20, r24
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	02 2e       	mov	r0, r18
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <DIO_u8SetPinDirection+0x204>
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	0a 94       	dec	r0
    25ca:	e2 f7       	brpl	.-8      	; 0x25c4 <DIO_u8SetPinDirection+0x200>
    25cc:	84 2b       	or	r24, r20
    25ce:	8c 93       	st	X, r24
    25d0:	16 c0       	rjmp	.+44     	; 0x25fe <DIO_u8SetPinDirection+0x23a>
						break;
					}
					case(DIO_u8_PIN_INPUT):
					{
						CLEAR_BIT(DDRD_u8_REG,Copy_u8PinId);
    25d2:	a1 e3       	ldi	r26, 0x31	; 49
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e1 e3       	ldi	r30, 0x31	; 49
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	48 2f       	mov	r20, r24
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	02 2e       	mov	r0, r18
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <DIO_u8SetPinDirection+0x22c>
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	0a 94       	dec	r0
    25f2:	e2 f7       	brpl	.-8      	; 0x25ec <DIO_u8SetPinDirection+0x228>
    25f4:	80 95       	com	r24
    25f6:	84 23       	and	r24, r20
    25f8:	8c 93       	st	X, r24
    25fa:	01 c0       	rjmp	.+2      	; 0x25fe <DIO_u8SetPinDirection+0x23a>
			}
		}
	}
	else
	{
		Local_u8ReturnedState = NOT_OK;
    25fc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnedState;
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2600:	2e 96       	adiw	r28, 0x0e	; 14
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinValue)
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	2e 97       	sbiw	r28, 0x0e	; 14
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	8a 83       	std	Y+2, r24	; 0x02
    2628:	6b 83       	std	Y+3, r22	; 0x03
    262a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnedState=OK;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_u8PinValue <= DIO_u8_PIN_HIGH))
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	84 30       	cpi	r24, 0x04	; 4
    2634:	08 f0       	brcs	.+2      	; 0x2638 <DIO_u8SetPinValue+0x26>
    2636:	09 c1       	rjmp	.+530    	; 0x284a <DIO_u8SetPinValue+0x238>
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	88 30       	cpi	r24, 0x08	; 8
    263c:	08 f0       	brcs	.+2      	; 0x2640 <DIO_u8SetPinValue+0x2e>
    263e:	05 c1       	rjmp	.+522    	; 0x284a <DIO_u8SetPinValue+0x238>
    2640:	8c 81       	ldd	r24, Y+4	; 0x04
    2642:	82 30       	cpi	r24, 0x02	; 2
    2644:	08 f0       	brcs	.+2      	; 0x2648 <DIO_u8SetPinValue+0x36>
    2646:	01 c1       	rjmp	.+514    	; 0x284a <DIO_u8SetPinValue+0x238>
	{
		switch(Copy_u8PortId)
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	28 2f       	mov	r18, r24
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	3e 87       	std	Y+14, r19	; 0x0e
    2650:	2d 87       	std	Y+13, r18	; 0x0d
    2652:	8d 85       	ldd	r24, Y+13	; 0x0d
    2654:	9e 85       	ldd	r25, Y+14	; 0x0e
    2656:	81 30       	cpi	r24, 0x01	; 1
    2658:	91 05       	cpc	r25, r1
    265a:	09 f4       	brne	.+2      	; 0x265e <DIO_u8SetPinValue+0x4c>
    265c:	4f c0       	rjmp	.+158    	; 0x26fc <DIO_u8SetPinValue+0xea>
    265e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2660:	3e 85       	ldd	r19, Y+14	; 0x0e
    2662:	22 30       	cpi	r18, 0x02	; 2
    2664:	31 05       	cpc	r19, r1
    2666:	2c f4       	brge	.+10     	; 0x2672 <DIO_u8SetPinValue+0x60>
    2668:	8d 85       	ldd	r24, Y+13	; 0x0d
    266a:	9e 85       	ldd	r25, Y+14	; 0x0e
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	71 f0       	breq	.+28     	; 0x268c <DIO_u8SetPinValue+0x7a>
    2670:	ed c0       	rjmp	.+474    	; 0x284c <DIO_u8SetPinValue+0x23a>
    2672:	2d 85       	ldd	r18, Y+13	; 0x0d
    2674:	3e 85       	ldd	r19, Y+14	; 0x0e
    2676:	22 30       	cpi	r18, 0x02	; 2
    2678:	31 05       	cpc	r19, r1
    267a:	09 f4       	brne	.+2      	; 0x267e <DIO_u8SetPinValue+0x6c>
    267c:	77 c0       	rjmp	.+238    	; 0x276c <DIO_u8SetPinValue+0x15a>
    267e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2680:	9e 85       	ldd	r25, Y+14	; 0x0e
    2682:	83 30       	cpi	r24, 0x03	; 3
    2684:	91 05       	cpc	r25, r1
    2686:	09 f4       	brne	.+2      	; 0x268a <DIO_u8SetPinValue+0x78>
    2688:	a9 c0       	rjmp	.+338    	; 0x27dc <DIO_u8SetPinValue+0x1ca>
    268a:	e0 c0       	rjmp	.+448    	; 0x284c <DIO_u8SetPinValue+0x23a>
		{
			case(DIO_u8_PORTA):
			{
				switch(Copy_u8PinValue)
    268c:	8c 81       	ldd	r24, Y+4	; 0x04
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	3c 87       	std	Y+12, r19	; 0x0c
    2694:	2b 87       	std	Y+11, r18	; 0x0b
    2696:	8b 85       	ldd	r24, Y+11	; 0x0b
    2698:	9c 85       	ldd	r25, Y+12	; 0x0c
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	d1 f0       	breq	.+52     	; 0x26d2 <DIO_u8SetPinValue+0xc0>
    269e:	2b 85       	ldd	r18, Y+11	; 0x0b
    26a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    26a2:	21 30       	cpi	r18, 0x01	; 1
    26a4:	31 05       	cpc	r19, r1
    26a6:	09 f0       	breq	.+2      	; 0x26aa <DIO_u8SetPinValue+0x98>
    26a8:	d1 c0       	rjmp	.+418    	; 0x284c <DIO_u8SetPinValue+0x23a>
				{
					case(DIO_u8_PIN_HIGH):
					{
						SET_BIT(PORTA_u8_REG,Copy_u8PinId);
    26aa:	ab e3       	ldi	r26, 0x3B	; 59
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	eb e3       	ldi	r30, 0x3B	; 59
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	48 2f       	mov	r20, r24
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	02 2e       	mov	r0, r18
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <DIO_u8SetPinValue+0xb6>
    26c4:	88 0f       	add	r24, r24
    26c6:	99 1f       	adc	r25, r25
    26c8:	0a 94       	dec	r0
    26ca:	e2 f7       	brpl	.-8      	; 0x26c4 <DIO_u8SetPinValue+0xb2>
    26cc:	84 2b       	or	r24, r20
    26ce:	8c 93       	st	X, r24
    26d0:	bd c0       	rjmp	.+378    	; 0x284c <DIO_u8SetPinValue+0x23a>
						break;
					}
					case(DIO_u8_PIN_LOW):
					{
						CLEAR_BIT(PORTA_u8_REG,Copy_u8PinId);
    26d2:	ab e3       	ldi	r26, 0x3B	; 59
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	eb e3       	ldi	r30, 0x3B	; 59
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	48 2f       	mov	r20, r24
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	02 2e       	mov	r0, r18
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <DIO_u8SetPinValue+0xde>
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	0a 94       	dec	r0
    26f2:	e2 f7       	brpl	.-8      	; 0x26ec <DIO_u8SetPinValue+0xda>
    26f4:	80 95       	com	r24
    26f6:	84 23       	and	r24, r20
    26f8:	8c 93       	st	X, r24
    26fa:	a8 c0       	rjmp	.+336    	; 0x284c <DIO_u8SetPinValue+0x23a>
				}
				break;
			}
			case(DIO_u8_PORTB):
			{
				switch(Copy_u8PinValue)
    26fc:	8c 81       	ldd	r24, Y+4	; 0x04
    26fe:	28 2f       	mov	r18, r24
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	3a 87       	std	Y+10, r19	; 0x0a
    2704:	29 87       	std	Y+9, r18	; 0x09
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	d1 f0       	breq	.+52     	; 0x2742 <DIO_u8SetPinValue+0x130>
    270e:	29 85       	ldd	r18, Y+9	; 0x09
    2710:	3a 85       	ldd	r19, Y+10	; 0x0a
    2712:	21 30       	cpi	r18, 0x01	; 1
    2714:	31 05       	cpc	r19, r1
    2716:	09 f0       	breq	.+2      	; 0x271a <DIO_u8SetPinValue+0x108>
    2718:	99 c0       	rjmp	.+306    	; 0x284c <DIO_u8SetPinValue+0x23a>
				{
					case(DIO_u8_PIN_HIGH):
					{
						SET_BIT(PORTB_u8_REG,Copy_u8PinId);
    271a:	a8 e3       	ldi	r26, 0x38	; 56
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e8 e3       	ldi	r30, 0x38	; 56
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	48 2f       	mov	r20, r24
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	02 2e       	mov	r0, r18
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <DIO_u8SetPinValue+0x126>
    2734:	88 0f       	add	r24, r24
    2736:	99 1f       	adc	r25, r25
    2738:	0a 94       	dec	r0
    273a:	e2 f7       	brpl	.-8      	; 0x2734 <DIO_u8SetPinValue+0x122>
    273c:	84 2b       	or	r24, r20
    273e:	8c 93       	st	X, r24
    2740:	85 c0       	rjmp	.+266    	; 0x284c <DIO_u8SetPinValue+0x23a>
						break;
					}
					case(DIO_u8_PIN_LOW):
					{
						CLEAR_BIT(PORTB_u8_REG,Copy_u8PinId);
    2742:	a8 e3       	ldi	r26, 0x38	; 56
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	e8 e3       	ldi	r30, 0x38	; 56
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	48 2f       	mov	r20, r24
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	02 2e       	mov	r0, r18
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <DIO_u8SetPinValue+0x14e>
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	0a 94       	dec	r0
    2762:	e2 f7       	brpl	.-8      	; 0x275c <DIO_u8SetPinValue+0x14a>
    2764:	80 95       	com	r24
    2766:	84 23       	and	r24, r20
    2768:	8c 93       	st	X, r24
    276a:	70 c0       	rjmp	.+224    	; 0x284c <DIO_u8SetPinValue+0x23a>
				}
				break;
			}
			case(DIO_u8_PORTC):
			{
				switch(Copy_u8PinValue)
    276c:	8c 81       	ldd	r24, Y+4	; 0x04
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	38 87       	std	Y+8, r19	; 0x08
    2774:	2f 83       	std	Y+7, r18	; 0x07
    2776:	8f 81       	ldd	r24, Y+7	; 0x07
    2778:	98 85       	ldd	r25, Y+8	; 0x08
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	d1 f0       	breq	.+52     	; 0x27b2 <DIO_u8SetPinValue+0x1a0>
    277e:	2f 81       	ldd	r18, Y+7	; 0x07
    2780:	38 85       	ldd	r19, Y+8	; 0x08
    2782:	21 30       	cpi	r18, 0x01	; 1
    2784:	31 05       	cpc	r19, r1
    2786:	09 f0       	breq	.+2      	; 0x278a <DIO_u8SetPinValue+0x178>
    2788:	61 c0       	rjmp	.+194    	; 0x284c <DIO_u8SetPinValue+0x23a>
				{
					case(DIO_u8_PIN_HIGH):
					{
						SET_BIT(PORTC_u8_REG,Copy_u8PinId);
    278a:	a5 e3       	ldi	r26, 0x35	; 53
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e5 e3       	ldi	r30, 0x35	; 53
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	48 2f       	mov	r20, r24
    2796:	8b 81       	ldd	r24, Y+3	; 0x03
    2798:	28 2f       	mov	r18, r24
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	02 2e       	mov	r0, r18
    27a2:	02 c0       	rjmp	.+4      	; 0x27a8 <DIO_u8SetPinValue+0x196>
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	0a 94       	dec	r0
    27aa:	e2 f7       	brpl	.-8      	; 0x27a4 <DIO_u8SetPinValue+0x192>
    27ac:	84 2b       	or	r24, r20
    27ae:	8c 93       	st	X, r24
    27b0:	4d c0       	rjmp	.+154    	; 0x284c <DIO_u8SetPinValue+0x23a>
						break;
					}
					case(DIO_u8_PIN_LOW):
					{
						CLEAR_BIT(PORTC_u8_REG,Copy_u8PinId);
    27b2:	a5 e3       	ldi	r26, 0x35	; 53
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e5 e3       	ldi	r30, 0x35	; 53
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	48 2f       	mov	r20, r24
    27be:	8b 81       	ldd	r24, Y+3	; 0x03
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	02 2e       	mov	r0, r18
    27ca:	02 c0       	rjmp	.+4      	; 0x27d0 <DIO_u8SetPinValue+0x1be>
    27cc:	88 0f       	add	r24, r24
    27ce:	99 1f       	adc	r25, r25
    27d0:	0a 94       	dec	r0
    27d2:	e2 f7       	brpl	.-8      	; 0x27cc <DIO_u8SetPinValue+0x1ba>
    27d4:	80 95       	com	r24
    27d6:	84 23       	and	r24, r20
    27d8:	8c 93       	st	X, r24
    27da:	38 c0       	rjmp	.+112    	; 0x284c <DIO_u8SetPinValue+0x23a>
				}
				break;
			}
			case(DIO_u8_PORTD):
			{
				switch(Copy_u8PinValue)
    27dc:	8c 81       	ldd	r24, Y+4	; 0x04
    27de:	28 2f       	mov	r18, r24
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	3e 83       	std	Y+6, r19	; 0x06
    27e4:	2d 83       	std	Y+5, r18	; 0x05
    27e6:	8d 81       	ldd	r24, Y+5	; 0x05
    27e8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	c9 f0       	breq	.+50     	; 0x2820 <DIO_u8SetPinValue+0x20e>
    27ee:	2d 81       	ldd	r18, Y+5	; 0x05
    27f0:	3e 81       	ldd	r19, Y+6	; 0x06
    27f2:	21 30       	cpi	r18, 0x01	; 1
    27f4:	31 05       	cpc	r19, r1
    27f6:	51 f5       	brne	.+84     	; 0x284c <DIO_u8SetPinValue+0x23a>
				{
					case(DIO_u8_PIN_HIGH):
					{
						SET_BIT(PORTD_u8_REG,Copy_u8PinId);
    27f8:	a2 e3       	ldi	r26, 0x32	; 50
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e2 e3       	ldi	r30, 0x32	; 50
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	48 2f       	mov	r20, r24
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	02 2e       	mov	r0, r18
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <DIO_u8SetPinValue+0x204>
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	0a 94       	dec	r0
    2818:	e2 f7       	brpl	.-8      	; 0x2812 <DIO_u8SetPinValue+0x200>
    281a:	84 2b       	or	r24, r20
    281c:	8c 93       	st	X, r24
    281e:	16 c0       	rjmp	.+44     	; 0x284c <DIO_u8SetPinValue+0x23a>
						break;
					}
					case(DIO_u8_PIN_LOW):
					{
						CLEAR_BIT(PORTD_u8_REG,Copy_u8PinId);
    2820:	a2 e3       	ldi	r26, 0x32	; 50
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	e2 e3       	ldi	r30, 0x32	; 50
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	48 2f       	mov	r20, r24
    282c:	8b 81       	ldd	r24, Y+3	; 0x03
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	02 2e       	mov	r0, r18
    2838:	02 c0       	rjmp	.+4      	; 0x283e <DIO_u8SetPinValue+0x22c>
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	0a 94       	dec	r0
    2840:	e2 f7       	brpl	.-8      	; 0x283a <DIO_u8SetPinValue+0x228>
    2842:	80 95       	com	r24
    2844:	84 23       	and	r24, r20
    2846:	8c 93       	st	X, r24
    2848:	01 c0       	rjmp	.+2      	; 0x284c <DIO_u8SetPinValue+0x23a>
			}
		}
	}
	else
	{
		Local_u8ReturnedState=NOT_OK;
    284a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnedState;
    284c:	89 81       	ldd	r24, Y+1	; 0x01
}
    284e:	2e 96       	adiw	r28, 0x0e	; 14
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 *Copy_pu8ReturnedPinValue)
{
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	27 97       	sbiw	r28, 0x07	; 7
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	8a 83       	std	Y+2, r24	; 0x02
    2876:	6b 83       	std	Y+3, r22	; 0x03
    2878:	5d 83       	std	Y+5, r21	; 0x05
    287a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnedState=OK;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_pu8ReturnedPinValue != NULL))
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	84 30       	cpi	r24, 0x04	; 4
    2884:	08 f0       	brcs	.+2      	; 0x2888 <DIO_u8GetPinValue+0x28>
    2886:	ab c0       	rjmp	.+342    	; 0x29de <DIO_u8GetPinValue+0x17e>
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	88 30       	cpi	r24, 0x08	; 8
    288c:	08 f0       	brcs	.+2      	; 0x2890 <DIO_u8GetPinValue+0x30>
    288e:	a7 c0       	rjmp	.+334    	; 0x29de <DIO_u8GetPinValue+0x17e>
    2890:	8c 81       	ldd	r24, Y+4	; 0x04
    2892:	9d 81       	ldd	r25, Y+5	; 0x05
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	09 f4       	brne	.+2      	; 0x289a <DIO_u8GetPinValue+0x3a>
    2898:	a2 c0       	rjmp	.+324    	; 0x29de <DIO_u8GetPinValue+0x17e>
	{
		switch(Copy_u8PortId)
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	28 2f       	mov	r18, r24
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	3f 83       	std	Y+7, r19	; 0x07
    28a2:	2e 83       	std	Y+6, r18	; 0x06
    28a4:	4e 81       	ldd	r20, Y+6	; 0x06
    28a6:	5f 81       	ldd	r21, Y+7	; 0x07
    28a8:	41 30       	cpi	r20, 0x01	; 1
    28aa:	51 05       	cpc	r21, r1
    28ac:	c1 f1       	breq	.+112    	; 0x291e <DIO_u8GetPinValue+0xbe>
    28ae:	8e 81       	ldd	r24, Y+6	; 0x06
    28b0:	9f 81       	ldd	r25, Y+7	; 0x07
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	91 05       	cpc	r25, r1
    28b6:	34 f4       	brge	.+12     	; 0x28c4 <DIO_u8GetPinValue+0x64>
    28b8:	2e 81       	ldd	r18, Y+6	; 0x06
    28ba:	3f 81       	ldd	r19, Y+7	; 0x07
    28bc:	21 15       	cp	r18, r1
    28be:	31 05       	cpc	r19, r1
    28c0:	71 f0       	breq	.+28     	; 0x28de <DIO_u8GetPinValue+0x7e>
    28c2:	8e c0       	rjmp	.+284    	; 0x29e0 <DIO_u8GetPinValue+0x180>
    28c4:	4e 81       	ldd	r20, Y+6	; 0x06
    28c6:	5f 81       	ldd	r21, Y+7	; 0x07
    28c8:	42 30       	cpi	r20, 0x02	; 2
    28ca:	51 05       	cpc	r21, r1
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <DIO_u8GetPinValue+0x70>
    28ce:	47 c0       	rjmp	.+142    	; 0x295e <DIO_u8GetPinValue+0xfe>
    28d0:	8e 81       	ldd	r24, Y+6	; 0x06
    28d2:	9f 81       	ldd	r25, Y+7	; 0x07
    28d4:	83 30       	cpi	r24, 0x03	; 3
    28d6:	91 05       	cpc	r25, r1
    28d8:	09 f4       	brne	.+2      	; 0x28dc <DIO_u8GetPinValue+0x7c>
    28da:	61 c0       	rjmp	.+194    	; 0x299e <DIO_u8GetPinValue+0x13e>
    28dc:	81 c0       	rjmp	.+258    	; 0x29e0 <DIO_u8GetPinValue+0x180>
		{
			case(DIO_u8_PORTA):
			{
				*Copy_pu8ReturnedPinValue=GET_BIT(PINA_u8_REG,Copy_u8PinId);
    28de:	e9 e3       	ldi	r30, 0x39	; 57
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	48 2f       	mov	r20, r24
    28e6:	50 e0       	ldi	r21, 0x00	; 0
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <DIO_u8GetPinValue+0x98>
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	2a 95       	dec	r18
    28fa:	e2 f7       	brpl	.-8      	; 0x28f4 <DIO_u8GetPinValue+0x94>
    28fc:	9a 01       	movw	r18, r20
    28fe:	28 23       	and	r18, r24
    2900:	39 23       	and	r19, r25
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	88 2f       	mov	r24, r24
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a9 01       	movw	r20, r18
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <DIO_u8GetPinValue+0xb0>
    290c:	55 95       	asr	r21
    290e:	47 95       	ror	r20
    2910:	8a 95       	dec	r24
    2912:	e2 f7       	brpl	.-8      	; 0x290c <DIO_u8GetPinValue+0xac>
    2914:	ca 01       	movw	r24, r20
    2916:	ec 81       	ldd	r30, Y+4	; 0x04
    2918:	fd 81       	ldd	r31, Y+5	; 0x05
    291a:	80 83       	st	Z, r24
    291c:	61 c0       	rjmp	.+194    	; 0x29e0 <DIO_u8GetPinValue+0x180>
				break;
			}
			case(DIO_u8_PORTB):
			{
				*Copy_pu8ReturnedPinValue=GET_BIT(PINB_u8_REG,Copy_u8PinId);
    291e:	e6 e3       	ldi	r30, 0x36	; 54
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	48 2f       	mov	r20, r24
    2926:	50 e0       	ldi	r21, 0x00	; 0
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	28 2f       	mov	r18, r24
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <DIO_u8GetPinValue+0xd8>
    2934:	88 0f       	add	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	2a 95       	dec	r18
    293a:	e2 f7       	brpl	.-8      	; 0x2934 <DIO_u8GetPinValue+0xd4>
    293c:	9a 01       	movw	r18, r20
    293e:	28 23       	and	r18, r24
    2940:	39 23       	and	r19, r25
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	88 2f       	mov	r24, r24
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	a9 01       	movw	r20, r18
    294a:	02 c0       	rjmp	.+4      	; 0x2950 <DIO_u8GetPinValue+0xf0>
    294c:	55 95       	asr	r21
    294e:	47 95       	ror	r20
    2950:	8a 95       	dec	r24
    2952:	e2 f7       	brpl	.-8      	; 0x294c <DIO_u8GetPinValue+0xec>
    2954:	ca 01       	movw	r24, r20
    2956:	ec 81       	ldd	r30, Y+4	; 0x04
    2958:	fd 81       	ldd	r31, Y+5	; 0x05
    295a:	80 83       	st	Z, r24
    295c:	41 c0       	rjmp	.+130    	; 0x29e0 <DIO_u8GetPinValue+0x180>
				break;
			}
			case(DIO_u8_PORTC):
			{
				*Copy_pu8ReturnedPinValue=GET_BIT(PINC_u8_REG,Copy_u8PinId);
    295e:	e3 e3       	ldi	r30, 0x33	; 51
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	48 2f       	mov	r20, r24
    2966:	50 e0       	ldi	r21, 0x00	; 0
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <DIO_u8GetPinValue+0x118>
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	2a 95       	dec	r18
    297a:	e2 f7       	brpl	.-8      	; 0x2974 <DIO_u8GetPinValue+0x114>
    297c:	9a 01       	movw	r18, r20
    297e:	28 23       	and	r18, r24
    2980:	39 23       	and	r19, r25
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	88 2f       	mov	r24, r24
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	a9 01       	movw	r20, r18
    298a:	02 c0       	rjmp	.+4      	; 0x2990 <DIO_u8GetPinValue+0x130>
    298c:	55 95       	asr	r21
    298e:	47 95       	ror	r20
    2990:	8a 95       	dec	r24
    2992:	e2 f7       	brpl	.-8      	; 0x298c <DIO_u8GetPinValue+0x12c>
    2994:	ca 01       	movw	r24, r20
    2996:	ec 81       	ldd	r30, Y+4	; 0x04
    2998:	fd 81       	ldd	r31, Y+5	; 0x05
    299a:	80 83       	st	Z, r24
    299c:	21 c0       	rjmp	.+66     	; 0x29e0 <DIO_u8GetPinValue+0x180>
				break;
			}
			case(DIO_u8_PORTD):
			{
				*Copy_pu8ReturnedPinValue=GET_BIT(PIND_u8_REG,Copy_u8PinId);
    299e:	e0 e3       	ldi	r30, 0x30	; 48
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	80 81       	ld	r24, Z
    29a4:	48 2f       	mov	r20, r24
    29a6:	50 e0       	ldi	r21, 0x00	; 0
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	02 c0       	rjmp	.+4      	; 0x29b8 <DIO_u8GetPinValue+0x158>
    29b4:	88 0f       	add	r24, r24
    29b6:	99 1f       	adc	r25, r25
    29b8:	2a 95       	dec	r18
    29ba:	e2 f7       	brpl	.-8      	; 0x29b4 <DIO_u8GetPinValue+0x154>
    29bc:	9a 01       	movw	r18, r20
    29be:	28 23       	and	r18, r24
    29c0:	39 23       	and	r19, r25
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	88 2f       	mov	r24, r24
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	a9 01       	movw	r20, r18
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <DIO_u8GetPinValue+0x170>
    29cc:	55 95       	asr	r21
    29ce:	47 95       	ror	r20
    29d0:	8a 95       	dec	r24
    29d2:	e2 f7       	brpl	.-8      	; 0x29cc <DIO_u8GetPinValue+0x16c>
    29d4:	ca 01       	movw	r24, r20
    29d6:	ec 81       	ldd	r30, Y+4	; 0x04
    29d8:	fd 81       	ldd	r31, Y+5	; 0x05
    29da:	80 83       	st	Z, r24
    29dc:	01 c0       	rjmp	.+2      	; 0x29e0 <DIO_u8GetPinValue+0x180>
			}
		}
	}
	else
	{
		Local_u8ReturnedState=NOT_OK;
    29de:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnedState;
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29e2:	27 96       	adiw	r28, 0x07	; 7
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	08 95       	ret

000029f4 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortId,u8 Copy_u8PortDirection)
{
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	2d 97       	sbiw	r28, 0x0d	; 13
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	8a 83       	std	Y+2, r24	; 0x02
    2a0a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnedState=OK;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PortDirection <= DIO_u8_PORT_OUTPUT))
    2a10:	8a 81       	ldd	r24, Y+2	; 0x02
    2a12:	84 30       	cpi	r24, 0x04	; 4
    2a14:	08 f0       	brcs	.+2      	; 0x2a18 <DIO_u8SetPortDirection+0x24>
    2a16:	7d c0       	rjmp	.+250    	; 0x2b12 <DIO_u8SetPortDirection+0x11e>
	{
		switch(Copy_u8PortId)
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	3d 87       	std	Y+13, r19	; 0x0d
    2a20:	2c 87       	std	Y+12, r18	; 0x0c
    2a22:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a24:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a26:	81 30       	cpi	r24, 0x01	; 1
    2a28:	91 05       	cpc	r25, r1
    2a2a:	71 f1       	breq	.+92     	; 0x2a88 <DIO_u8SetPortDirection+0x94>
    2a2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a2e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a30:	22 30       	cpi	r18, 0x02	; 2
    2a32:	31 05       	cpc	r19, r1
    2a34:	2c f4       	brge	.+10     	; 0x2a40 <DIO_u8SetPortDirection+0x4c>
    2a36:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a38:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	69 f0       	breq	.+26     	; 0x2a58 <DIO_u8SetPortDirection+0x64>
    2a3e:	6a c0       	rjmp	.+212    	; 0x2b14 <DIO_u8SetPortDirection+0x120>
    2a40:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a42:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a44:	22 30       	cpi	r18, 0x02	; 2
    2a46:	31 05       	cpc	r19, r1
    2a48:	b1 f1       	breq	.+108    	; 0x2ab6 <DIO_u8SetPortDirection+0xc2>
    2a4a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a4c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a4e:	83 30       	cpi	r24, 0x03	; 3
    2a50:	91 05       	cpc	r25, r1
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <DIO_u8SetPortDirection+0x62>
    2a54:	47 c0       	rjmp	.+142    	; 0x2ae4 <DIO_u8SetPortDirection+0xf0>
    2a56:	5e c0       	rjmp	.+188    	; 0x2b14 <DIO_u8SetPortDirection+0x120>
		{
			case(DIO_u8_PORTA):
			{
				switch(Copy_u8PortDirection)
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	3b 87       	std	Y+11, r19	; 0x0b
    2a60:	2a 87       	std	Y+10, r18	; 0x0a
    2a62:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a64:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	59 f0       	breq	.+22     	; 0x2a80 <DIO_u8SetPortDirection+0x8c>
    2a6a:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a6c:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a6e:	2f 3f       	cpi	r18, 0xFF	; 255
    2a70:	31 05       	cpc	r19, r1
    2a72:	09 f0       	breq	.+2      	; 0x2a76 <DIO_u8SetPortDirection+0x82>
    2a74:	4f c0       	rjmp	.+158    	; 0x2b14 <DIO_u8SetPortDirection+0x120>
				{
					case(DIO_u8_PORT_OUTPUT):
					{
						DDRA_u8_REG=DIO_u8_PORT_OUTPUT;
    2a76:	ea e3       	ldi	r30, 0x3A	; 58
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	8f ef       	ldi	r24, 0xFF	; 255
    2a7c:	80 83       	st	Z, r24
    2a7e:	4a c0       	rjmp	.+148    	; 0x2b14 <DIO_u8SetPortDirection+0x120>
						break;
					}
					case(DIO_u8_PORT_INPUT):
					{
						DDRA_u8_REG=DIO_u8_PORT_INPUT;
    2a80:	ea e3       	ldi	r30, 0x3A	; 58
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	10 82       	st	Z, r1
    2a86:	46 c0       	rjmp	.+140    	; 0x2b14 <DIO_u8SetPortDirection+0x120>
				}
				break;
			}
			case(DIO_u8_PORTB):
			{
				switch(Copy_u8PortDirection)
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	28 2f       	mov	r18, r24
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	39 87       	std	Y+9, r19	; 0x09
    2a90:	28 87       	std	Y+8, r18	; 0x08
    2a92:	88 85       	ldd	r24, Y+8	; 0x08
    2a94:	99 85       	ldd	r25, Y+9	; 0x09
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	51 f0       	breq	.+20     	; 0x2aae <DIO_u8SetPortDirection+0xba>
    2a9a:	28 85       	ldd	r18, Y+8	; 0x08
    2a9c:	39 85       	ldd	r19, Y+9	; 0x09
    2a9e:	2f 3f       	cpi	r18, 0xFF	; 255
    2aa0:	31 05       	cpc	r19, r1
    2aa2:	c1 f5       	brne	.+112    	; 0x2b14 <DIO_u8SetPortDirection+0x120>
				{
					case(DIO_u8_PORT_OUTPUT):
					{
						DDRB_u8_REG=DIO_u8_PORT_OUTPUT;
    2aa4:	e7 e3       	ldi	r30, 0x37	; 55
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	8f ef       	ldi	r24, 0xFF	; 255
    2aaa:	80 83       	st	Z, r24
    2aac:	33 c0       	rjmp	.+102    	; 0x2b14 <DIO_u8SetPortDirection+0x120>
						break;
					}
					case(DIO_u8_PORT_INPUT):
					{
						DDRB_u8_REG=DIO_u8_PORT_INPUT;
    2aae:	e7 e3       	ldi	r30, 0x37	; 55
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	10 82       	st	Z, r1
    2ab4:	2f c0       	rjmp	.+94     	; 0x2b14 <DIO_u8SetPortDirection+0x120>
				}
				break;
			}
			case(DIO_u8_PORTC):
			{
				switch(Copy_u8PortDirection)
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	3f 83       	std	Y+7, r19	; 0x07
    2abe:	2e 83       	std	Y+6, r18	; 0x06
    2ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	51 f0       	breq	.+20     	; 0x2adc <DIO_u8SetPortDirection+0xe8>
    2ac8:	2e 81       	ldd	r18, Y+6	; 0x06
    2aca:	3f 81       	ldd	r19, Y+7	; 0x07
    2acc:	2f 3f       	cpi	r18, 0xFF	; 255
    2ace:	31 05       	cpc	r19, r1
    2ad0:	09 f5       	brne	.+66     	; 0x2b14 <DIO_u8SetPortDirection+0x120>
				{
					case(DIO_u8_PORT_OUTPUT):
					{
						DDRC_u8_REG=DIO_u8_PORT_OUTPUT;
    2ad2:	e4 e3       	ldi	r30, 0x34	; 52
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	8f ef       	ldi	r24, 0xFF	; 255
    2ad8:	80 83       	st	Z, r24
    2ada:	1c c0       	rjmp	.+56     	; 0x2b14 <DIO_u8SetPortDirection+0x120>
						break;
					}
					case(DIO_u8_PORT_INPUT):
					{
						DDRC_u8_REG=DIO_u8_PORT_INPUT;
    2adc:	e4 e3       	ldi	r30, 0x34	; 52
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	10 82       	st	Z, r1
    2ae2:	18 c0       	rjmp	.+48     	; 0x2b14 <DIO_u8SetPortDirection+0x120>
				}
				break;
			}
			case(DIO_u8_PORTD):
			{
				switch(Copy_u8PortDirection)
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	3d 83       	std	Y+5, r19	; 0x05
    2aec:	2c 83       	std	Y+4, r18	; 0x04
    2aee:	8c 81       	ldd	r24, Y+4	; 0x04
    2af0:	9d 81       	ldd	r25, Y+5	; 0x05
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	51 f0       	breq	.+20     	; 0x2b0a <DIO_u8SetPortDirection+0x116>
    2af6:	2c 81       	ldd	r18, Y+4	; 0x04
    2af8:	3d 81       	ldd	r19, Y+5	; 0x05
    2afa:	2f 3f       	cpi	r18, 0xFF	; 255
    2afc:	31 05       	cpc	r19, r1
    2afe:	51 f4       	brne	.+20     	; 0x2b14 <DIO_u8SetPortDirection+0x120>
				{
					case(DIO_u8_PORT_OUTPUT):
					{
						DDRD_u8_REG=DIO_u8_PORT_OUTPUT;
    2b00:	e1 e3       	ldi	r30, 0x31	; 49
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	8f ef       	ldi	r24, 0xFF	; 255
    2b06:	80 83       	st	Z, r24
    2b08:	05 c0       	rjmp	.+10     	; 0x2b14 <DIO_u8SetPortDirection+0x120>
						break;
					}
					case(DIO_u8_PORT_INPUT):
					{
						DDRD_u8_REG=DIO_u8_PORT_INPUT;
    2b0a:	e1 e3       	ldi	r30, 0x31	; 49
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	10 82       	st	Z, r1
    2b10:	01 c0       	rjmp	.+2      	; 0x2b14 <DIO_u8SetPortDirection+0x120>
	          
		}
	}
	else
	{
		Local_u8ReturnedState=NOT_OK;
    2b12:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnedState;
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b16:	2d 96       	adiw	r28, 0x0d	; 13
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8PortId,u8 Copy_u8PortValue)
{
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <DIO_u8SetPortValue+0x6>
    2b2e:	00 d0       	rcall	.+0      	; 0x2b30 <DIO_u8SetPortValue+0x8>
    2b30:	0f 92       	push	r0
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	8a 83       	std	Y+2, r24	; 0x02
    2b38:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnedState=OK;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <= DIO_u8_PORTD)
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	84 30       	cpi	r24, 0x04	; 4
    2b42:	98 f5       	brcc	.+102    	; 0x2baa <DIO_u8SetPortValue+0x82>
	{
		switch(Copy_u8PortId)
    2b44:	8a 81       	ldd	r24, Y+2	; 0x02
    2b46:	28 2f       	mov	r18, r24
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	3d 83       	std	Y+5, r19	; 0x05
    2b4c:	2c 83       	std	Y+4, r18	; 0x04
    2b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b50:	9d 81       	ldd	r25, Y+5	; 0x05
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	91 05       	cpc	r25, r1
    2b56:	d1 f0       	breq	.+52     	; 0x2b8c <DIO_u8SetPortValue+0x64>
    2b58:	2c 81       	ldd	r18, Y+4	; 0x04
    2b5a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b5c:	22 30       	cpi	r18, 0x02	; 2
    2b5e:	31 05       	cpc	r19, r1
    2b60:	2c f4       	brge	.+10     	; 0x2b6c <DIO_u8SetPortValue+0x44>
    2b62:	8c 81       	ldd	r24, Y+4	; 0x04
    2b64:	9d 81       	ldd	r25, Y+5	; 0x05
    2b66:	00 97       	sbiw	r24, 0x00	; 0
    2b68:	61 f0       	breq	.+24     	; 0x2b82 <DIO_u8SetPortValue+0x5a>
    2b6a:	20 c0       	rjmp	.+64     	; 0x2bac <DIO_u8SetPortValue+0x84>
    2b6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b70:	22 30       	cpi	r18, 0x02	; 2
    2b72:	31 05       	cpc	r19, r1
    2b74:	81 f0       	breq	.+32     	; 0x2b96 <DIO_u8SetPortValue+0x6e>
    2b76:	8c 81       	ldd	r24, Y+4	; 0x04
    2b78:	9d 81       	ldd	r25, Y+5	; 0x05
    2b7a:	83 30       	cpi	r24, 0x03	; 3
    2b7c:	91 05       	cpc	r25, r1
    2b7e:	81 f0       	breq	.+32     	; 0x2ba0 <DIO_u8SetPortValue+0x78>
    2b80:	15 c0       	rjmp	.+42     	; 0x2bac <DIO_u8SetPortValue+0x84>
		{
			case(DIO_u8_PORTA):
			{
				PORTA_u8_REG=Copy_u8PortValue;
    2b82:	eb e3       	ldi	r30, 0x3B	; 59
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	8b 81       	ldd	r24, Y+3	; 0x03
    2b88:	80 83       	st	Z, r24
    2b8a:	10 c0       	rjmp	.+32     	; 0x2bac <DIO_u8SetPortValue+0x84>
				break;
			}
			case(DIO_u8_PORTB):
			{
				PORTB_u8_REG=Copy_u8PortValue;
    2b8c:	e8 e3       	ldi	r30, 0x38	; 56
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	8b 81       	ldd	r24, Y+3	; 0x03
    2b92:	80 83       	st	Z, r24
    2b94:	0b c0       	rjmp	.+22     	; 0x2bac <DIO_u8SetPortValue+0x84>
				break;
			}
			case(DIO_u8_PORTC):
			{
				PORTC_u8_REG=Copy_u8PortValue;
    2b96:	e5 e3       	ldi	r30, 0x35	; 53
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9c:	80 83       	st	Z, r24
    2b9e:	06 c0       	rjmp	.+12     	; 0x2bac <DIO_u8SetPortValue+0x84>
				break;
			}
			case(DIO_u8_PORTD):
			{
				PORTD_u8_REG=Copy_u8PortValue;
    2ba0:	e2 e3       	ldi	r30, 0x32	; 50
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	80 83       	st	Z, r24
    2ba8:	01 c0       	rjmp	.+2      	; 0x2bac <DIO_u8SetPortValue+0x84>
			}
		}
	}
	else
	{
		Local_u8ReturnedState=NOT_OK;
    2baa:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnedState;
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	cf 91       	pop	r28
    2bba:	df 91       	pop	r29
    2bbc:	08 95       	ret

00002bbe <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8PortId,u8 *Copy_pu8ReturnedPortValue)
{
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	00 d0       	rcall	.+0      	; 0x2bc4 <DIO_u8GetPortValue+0x6>
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <DIO_u8GetPortValue+0x8>
    2bc6:	00 d0       	rcall	.+0      	; 0x2bc8 <DIO_u8GetPortValue+0xa>
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	8a 83       	std	Y+2, r24	; 0x02
    2bce:	7c 83       	std	Y+4, r23	; 0x04
    2bd0:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8ReturnedState=OK;
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_pu8ReturnedPortValue != NULL))
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	84 30       	cpi	r24, 0x04	; 4
    2bda:	08 f0       	brcs	.+2      	; 0x2bde <DIO_u8GetPortValue+0x20>
    2bdc:	3f c0       	rjmp	.+126    	; 0x2c5c <DIO_u8GetPortValue+0x9e>
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	9c 81       	ldd	r25, Y+4	; 0x04
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	d9 f1       	breq	.+118    	; 0x2c5c <DIO_u8GetPortValue+0x9e>
	{
		switch(Copy_u8PortId)
    2be6:	8a 81       	ldd	r24, Y+2	; 0x02
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	3e 83       	std	Y+6, r19	; 0x06
    2bee:	2d 83       	std	Y+5, r18	; 0x05
    2bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf4:	81 30       	cpi	r24, 0x01	; 1
    2bf6:	91 05       	cpc	r25, r1
    2bf8:	e1 f0       	breq	.+56     	; 0x2c32 <DIO_u8GetPortValue+0x74>
    2bfa:	2d 81       	ldd	r18, Y+5	; 0x05
    2bfc:	3e 81       	ldd	r19, Y+6	; 0x06
    2bfe:	22 30       	cpi	r18, 0x02	; 2
    2c00:	31 05       	cpc	r19, r1
    2c02:	2c f4       	brge	.+10     	; 0x2c0e <DIO_u8GetPortValue+0x50>
    2c04:	8d 81       	ldd	r24, Y+5	; 0x05
    2c06:	9e 81       	ldd	r25, Y+6	; 0x06
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	61 f0       	breq	.+24     	; 0x2c24 <DIO_u8GetPortValue+0x66>
    2c0c:	28 c0       	rjmp	.+80     	; 0x2c5e <DIO_u8GetPortValue+0xa0>
    2c0e:	2d 81       	ldd	r18, Y+5	; 0x05
    2c10:	3e 81       	ldd	r19, Y+6	; 0x06
    2c12:	22 30       	cpi	r18, 0x02	; 2
    2c14:	31 05       	cpc	r19, r1
    2c16:	a1 f0       	breq	.+40     	; 0x2c40 <DIO_u8GetPortValue+0x82>
    2c18:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1c:	83 30       	cpi	r24, 0x03	; 3
    2c1e:	91 05       	cpc	r25, r1
    2c20:	b1 f0       	breq	.+44     	; 0x2c4e <DIO_u8GetPortValue+0x90>
    2c22:	1d c0       	rjmp	.+58     	; 0x2c5e <DIO_u8GetPortValue+0xa0>
		{
			case(DIO_u8_PORTA):
			{
				*Copy_pu8ReturnedPortValue=PINA_u8_REG;
    2c24:	e9 e3       	ldi	r30, 0x39	; 57
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c2c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c2e:	80 83       	st	Z, r24
    2c30:	16 c0       	rjmp	.+44     	; 0x2c5e <DIO_u8GetPortValue+0xa0>
				break;
			}
			case(DIO_u8_PORTB):
			{
				*Copy_pu8ReturnedPortValue=PINB_u8_REG;
    2c32:	e6 e3       	ldi	r30, 0x36	; 54
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	eb 81       	ldd	r30, Y+3	; 0x03
    2c3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c3c:	80 83       	st	Z, r24
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <DIO_u8GetPortValue+0xa0>
				break;
			}
			case(DIO_u8_PORTC):
			{
				*Copy_pu8ReturnedPortValue=PINC_u8_REG;
    2c40:	e3 e3       	ldi	r30, 0x33	; 51
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	eb 81       	ldd	r30, Y+3	; 0x03
    2c48:	fc 81       	ldd	r31, Y+4	; 0x04
    2c4a:	80 83       	st	Z, r24
    2c4c:	08 c0       	rjmp	.+16     	; 0x2c5e <DIO_u8GetPortValue+0xa0>
				break;
			}
			case(DIO_u8_PORTD):
			{
				*Copy_pu8ReturnedPortValue=PIND_u8_REG;
    2c4e:	e0 e3       	ldi	r30, 0x30	; 48
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	eb 81       	ldd	r30, Y+3	; 0x03
    2c56:	fc 81       	ldd	r31, Y+4	; 0x04
    2c58:	80 83       	st	Z, r24
    2c5a:	01 c0       	rjmp	.+2      	; 0x2c5e <DIO_u8GetPortValue+0xa0>
			}
		}
	}
	else
	{
		local_u8ReturnedState=NOT_OK;
    2c5c:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ReturnedState;
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c60:	26 96       	adiw	r28, 0x06	; 6
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	cf 91       	pop	r28
    2c6e:	df 91       	pop	r29
    2c70:	08 95       	ret

00002c72 <DIO_u8TogglePortValue>:
void DIO_u8TogglePortValue(u8 Copy_u8PortId)
{
    2c72:	df 93       	push	r29
    2c74:	cf 93       	push	r28
    2c76:	00 d0       	rcall	.+0      	; 0x2c78 <DIO_u8TogglePortValue+0x6>
    2c78:	00 d0       	rcall	.+0      	; 0x2c7a <DIO_u8TogglePortValue+0x8>
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8TempValue;
	switch(Copy_u8PortId)
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	28 2f       	mov	r18, r24
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	3c 83       	std	Y+4, r19	; 0x04
    2c88:	2b 83       	std	Y+3, r18	; 0x03
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8e:	81 30       	cpi	r24, 0x01	; 1
    2c90:	91 05       	cpc	r25, r1
    2c92:	31 f1       	breq	.+76     	; 0x2ce0 <DIO_u8TogglePortValue+0x6e>
    2c94:	2b 81       	ldd	r18, Y+3	; 0x03
    2c96:	3c 81       	ldd	r19, Y+4	; 0x04
    2c98:	22 30       	cpi	r18, 0x02	; 2
    2c9a:	31 05       	cpc	r19, r1
    2c9c:	2c f4       	brge	.+10     	; 0x2ca8 <DIO_u8TogglePortValue+0x36>
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	61 f0       	breq	.+24     	; 0x2cbe <DIO_u8TogglePortValue+0x4c>
    2ca6:	4e c0       	rjmp	.+156    	; 0x2d44 <DIO_u8TogglePortValue+0xd2>
    2ca8:	2b 81       	ldd	r18, Y+3	; 0x03
    2caa:	3c 81       	ldd	r19, Y+4	; 0x04
    2cac:	22 30       	cpi	r18, 0x02	; 2
    2cae:	31 05       	cpc	r19, r1
    2cb0:	41 f1       	breq	.+80     	; 0x2d02 <DIO_u8TogglePortValue+0x90>
    2cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb6:	83 30       	cpi	r24, 0x03	; 3
    2cb8:	91 05       	cpc	r25, r1
    2cba:	a1 f1       	breq	.+104    	; 0x2d24 <DIO_u8TogglePortValue+0xb2>
    2cbc:	43 c0       	rjmp	.+134    	; 0x2d44 <DIO_u8TogglePortValue+0xd2>
	{
		case(DIO_u8_PORTA):
		{
			Local_u8TempValue = PINA_u8_REG;
    2cbe:	e9 e3       	ldi	r30, 0x39	; 57
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8TempValue == 0xff)
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	8f 3f       	cpi	r24, 0xFF	; 255
    2cca:	29 f4       	brne	.+10     	; 0x2cd6 <DIO_u8TogglePortValue+0x64>
			{
				DIO_u8SetPortValue(DIO_u8_PORTA,0x00);
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	60 e0       	ldi	r22, 0x00	; 0
    2cd0:	0e 94 94 15 	call	0x2b28	; 0x2b28 <DIO_u8SetPortValue>
    2cd4:	37 c0       	rjmp	.+110    	; 0x2d44 <DIO_u8TogglePortValue+0xd2>
			}
			else
			{
				DIO_u8SetPortValue(DIO_u8_PORTA,0xff);
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	6f ef       	ldi	r22, 0xFF	; 255
    2cda:	0e 94 94 15 	call	0x2b28	; 0x2b28 <DIO_u8SetPortValue>
    2cde:	32 c0       	rjmp	.+100    	; 0x2d44 <DIO_u8TogglePortValue+0xd2>
			}
			break;
		}
		case(DIO_u8_PORTB):
		{
			Local_u8TempValue = PINB_u8_REG;
    2ce0:	e6 e3       	ldi	r30, 0x36	; 54
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8TempValue == 0xff)
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	8f 3f       	cpi	r24, 0xFF	; 255
    2cec:	29 f4       	brne	.+10     	; 0x2cf8 <DIO_u8TogglePortValue+0x86>
			{
				DIO_u8SetPortValue(DIO_u8_PORTB,0x00);
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	60 e0       	ldi	r22, 0x00	; 0
    2cf2:	0e 94 94 15 	call	0x2b28	; 0x2b28 <DIO_u8SetPortValue>
    2cf6:	26 c0       	rjmp	.+76     	; 0x2d44 <DIO_u8TogglePortValue+0xd2>
			}
			else
			{
				DIO_u8SetPortValue(DIO_u8_PORTB,0xff);
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	6f ef       	ldi	r22, 0xFF	; 255
    2cfc:	0e 94 94 15 	call	0x2b28	; 0x2b28 <DIO_u8SetPortValue>
    2d00:	21 c0       	rjmp	.+66     	; 0x2d44 <DIO_u8TogglePortValue+0xd2>
			}
			break;
		}
		case(DIO_u8_PORTC):
		{
			Local_u8TempValue = PINC_u8_REG;
    2d02:	e3 e3       	ldi	r30, 0x33	; 51
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8TempValue == 0xff)
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	8f 3f       	cpi	r24, 0xFF	; 255
    2d0e:	29 f4       	brne	.+10     	; 0x2d1a <DIO_u8TogglePortValue+0xa8>
			{
				DIO_u8SetPortValue(DIO_u8_PORTC,0x00);
    2d10:	82 e0       	ldi	r24, 0x02	; 2
    2d12:	60 e0       	ldi	r22, 0x00	; 0
    2d14:	0e 94 94 15 	call	0x2b28	; 0x2b28 <DIO_u8SetPortValue>
    2d18:	15 c0       	rjmp	.+42     	; 0x2d44 <DIO_u8TogglePortValue+0xd2>
			}
			else
			{
				DIO_u8SetPortValue(DIO_u8_PORTC,0xff);
    2d1a:	82 e0       	ldi	r24, 0x02	; 2
    2d1c:	6f ef       	ldi	r22, 0xFF	; 255
    2d1e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <DIO_u8SetPortValue>
    2d22:	10 c0       	rjmp	.+32     	; 0x2d44 <DIO_u8TogglePortValue+0xd2>
			}
			break;
		}
		case(DIO_u8_PORTD):
		{
			Local_u8TempValue = PIND_u8_REG;
    2d24:	e0 e3       	ldi	r30, 0x30	; 48
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8TempValue == 0xff)
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d30:	29 f4       	brne	.+10     	; 0x2d3c <DIO_u8TogglePortValue+0xca>
			{
				DIO_u8SetPortValue(DIO_u8_PORTD,0x00);
    2d32:	83 e0       	ldi	r24, 0x03	; 3
    2d34:	60 e0       	ldi	r22, 0x00	; 0
    2d36:	0e 94 94 15 	call	0x2b28	; 0x2b28 <DIO_u8SetPortValue>
    2d3a:	04 c0       	rjmp	.+8      	; 0x2d44 <DIO_u8TogglePortValue+0xd2>
			}
			else
			{
				DIO_u8SetPortValue(DIO_u8_PORTD,0xff);
    2d3c:	83 e0       	ldi	r24, 0x03	; 3
    2d3e:	6f ef       	ldi	r22, 0xFF	; 255
    2d40:	0e 94 94 15 	call	0x2b28	; 0x2b28 <DIO_u8SetPortValue>
			}
			break;
		}
	}
}
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <TMR0_voidInit>:
static u8 TMR0_u8BusyFlag=0;
volatile static u16 ICU_u16OFF;
volatile static u16 ICU_u16ON;

void TMR0_voidInit(void)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
	//Select TMR0 Mode
	#if 	TMR0_MODE == TMR0_NORMAL_MODE
		CLEAR_BIT(TCCR0_u8_REG,3);
    2d5a:	a3 e5       	ldi	r26, 0x53	; 83
    2d5c:	b0 e0       	ldi	r27, 0x00	; 0
    2d5e:	e3 e5       	ldi	r30, 0x53	; 83
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
    2d64:	87 7f       	andi	r24, 0xF7	; 247
    2d66:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0_u8_REG,6);
    2d68:	a3 e5       	ldi	r26, 0x53	; 83
    2d6a:	b0 e0       	ldi	r27, 0x00	; 0
    2d6c:	e3 e5       	ldi	r30, 0x53	; 83
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	8f 7b       	andi	r24, 0xBF	; 191
    2d74:	8c 93       	st	X, r24
	if((TMR0_PRELOAD_VALUE) && (TMR0_CASE == TMR0_CASE_2))
	{
		TCNT0_u8_REG = TMR0_PRELOAD_VALUE;
	}
	//Select TMR0 Clock
	CLEAR_BIT(TCCR0_u8_REG,0);
    2d76:	a3 e5       	ldi	r26, 0x53	; 83
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e3 e5       	ldi	r30, 0x53	; 83
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	8e 7f       	andi	r24, 0xFE	; 254
    2d82:	8c 93       	st	X, r24
	SET_BIT(TCCR0_u8_REG,1);
    2d84:	a3 e5       	ldi	r26, 0x53	; 83
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	e3 e5       	ldi	r30, 0x53	; 83
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	82 60       	ori	r24, 0x02	; 2
    2d90:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_u8_REG,2);
    2d92:	a3 e5       	ldi	r26, 0x53	; 83
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e3 e5       	ldi	r30, 0x53	; 83
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	8b 7f       	andi	r24, 0xFB	; 251
    2d9e:	8c 93       	st	X, r24
}
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <TMR0_voidEnablePIE>:
void TMR0_voidEnablePIE(u8 Copy_u8PIE)
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <TMR0_voidEnablePIE+0x6>
    2dac:	0f 92       	push	r0
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PIE)
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	3b 83       	std	Y+3, r19	; 0x03
    2dbc:	2a 83       	std	Y+2, r18	; 0x02
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	31 f0       	breq	.+12     	; 0x2dd2 <TMR0_voidEnablePIE+0x2c>
    2dc6:	2a 81       	ldd	r18, Y+2	; 0x02
    2dc8:	3b 81       	ldd	r19, Y+3	; 0x03
    2dca:	21 30       	cpi	r18, 0x01	; 1
    2dcc:	31 05       	cpc	r19, r1
    2dce:	49 f0       	breq	.+18     	; 0x2de2 <TMR0_voidEnablePIE+0x3c>
    2dd0:	0f c0       	rjmp	.+30     	; 0x2df0 <TMR0_voidEnablePIE+0x4a>
	{
		//PIE for Overflow
		case (TMR0_u8_OVERFLOW):
		{
			SET_BIT(TIMSK_u8_REG,0);
    2dd2:	a9 e5       	ldi	r26, 0x59	; 89
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	e9 e5       	ldi	r30, 0x59	; 89
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	81 60       	ori	r24, 0x01	; 1
    2dde:	8c 93       	st	X, r24
    2de0:	07 c0       	rjmp	.+14     	; 0x2df0 <TMR0_voidEnablePIE+0x4a>
			break;
		}
		//PIE for Compare Match
		case (TMR0_u8_COMPARE_MATCH):
		{
			SET_BIT(TIMSK_u8_REG,1);
    2de2:	a9 e5       	ldi	r26, 0x59	; 89
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	e9 e5       	ldi	r30, 0x59	; 89
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	82 60       	ori	r24, 0x02	; 2
    2dee:	8c 93       	st	X, r24
			break;
		}
	}
}
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	cf 91       	pop	r28
    2df8:	df 91       	pop	r29
    2dfa:	08 95       	ret

00002dfc <TMR0_voidSetCallBack>:
void TMR0_voidSetCallBack(u8 Copy_u8Mode,void (*Copy_PF)(void))
{
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	00 d0       	rcall	.+0      	; 0x2e02 <TMR0_voidSetCallBack+0x6>
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <TMR0_voidSetCallBack+0x8>
    2e04:	0f 92       	push	r0
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	89 83       	std	Y+1, r24	; 0x01
    2e0c:	7b 83       	std	Y+3, r23	; 0x03
    2e0e:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_PF != NULL) && (TMR0_u8BusyFlag == 0))
    2e10:	8a 81       	ldd	r24, Y+2	; 0x02
    2e12:	9b 81       	ldd	r25, Y+3	; 0x03
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	11 f1       	breq	.+68     	; 0x2e5c <TMR0_voidSetCallBack+0x60>
    2e18:	80 91 9e 00 	lds	r24, 0x009E
    2e1c:	88 23       	and	r24, r24
    2e1e:	f1 f4       	brne	.+60     	; 0x2e5c <TMR0_voidSetCallBack+0x60>
	{
		TMR0_u8BusyFlag = 1;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	80 93 9e 00 	sts	0x009E, r24
		switch(Copy_u8Mode)
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	28 2f       	mov	r18, r24
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	3d 83       	std	Y+5, r19	; 0x05
    2e2e:	2c 83       	std	Y+4, r18	; 0x04
    2e30:	8c 81       	ldd	r24, Y+4	; 0x04
    2e32:	9d 81       	ldd	r25, Y+5	; 0x05
    2e34:	00 97       	sbiw	r24, 0x00	; 0
    2e36:	61 f0       	breq	.+24     	; 0x2e50 <TMR0_voidSetCallBack+0x54>
    2e38:	2c 81       	ldd	r18, Y+4	; 0x04
    2e3a:	3d 81       	ldd	r19, Y+5	; 0x05
    2e3c:	21 30       	cpi	r18, 0x01	; 1
    2e3e:	31 05       	cpc	r19, r1
    2e40:	69 f4       	brne	.+26     	; 0x2e5c <TMR0_voidSetCallBack+0x60>
		{
			case (TMR0_u8_NORMAL):
			{
				TMR0_OverFlow = Copy_PF;
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	9b 81       	ldd	r25, Y+3	; 0x03
    2e46:	90 93 9b 00 	sts	0x009B, r25
    2e4a:	80 93 9a 00 	sts	0x009A, r24
    2e4e:	06 c0       	rjmp	.+12     	; 0x2e5c <TMR0_voidSetCallBack+0x60>
				break;
			}
			case (TMR0_u8_CTC):
			{
				TMR0_CompareMatch = Copy_PF;
    2e50:	8a 81       	ldd	r24, Y+2	; 0x02
    2e52:	9b 81       	ldd	r25, Y+3	; 0x03
    2e54:	90 93 9d 00 	sts	0x009D, r25
    2e58:	80 93 9c 00 	sts	0x009C, r24
				break;
			}
		}
	}
}
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	08 95       	ret

00002e6c <__vector_11>:
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    2e6c:	1f 92       	push	r1
    2e6e:	0f 92       	push	r0
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	0f 92       	push	r0
    2e74:	11 24       	eor	r1, r1
    2e76:	2f 93       	push	r18
    2e78:	3f 93       	push	r19
    2e7a:	4f 93       	push	r20
    2e7c:	5f 93       	push	r21
    2e7e:	6f 93       	push	r22
    2e80:	7f 93       	push	r23
    2e82:	8f 93       	push	r24
    2e84:	9f 93       	push	r25
    2e86:	af 93       	push	r26
    2e88:	bf 93       	push	r27
    2e8a:	ef 93       	push	r30
    2e8c:	ff 93       	push	r31
    2e8e:	df 93       	push	r29
    2e90:	cf 93       	push	r28
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
		}
	#elif TMR0_CASE == TMR0_CASE_2

	#elif TMR0_CASE == TMR0_CASE_3
		static u32 Local_u8Counter = 0;
		Local_u8Counter++;
    2e96:	80 91 9f 00 	lds	r24, 0x009F
    2e9a:	90 91 a0 00 	lds	r25, 0x00A0
    2e9e:	a0 91 a1 00 	lds	r26, 0x00A1
    2ea2:	b0 91 a2 00 	lds	r27, 0x00A2
    2ea6:	01 96       	adiw	r24, 0x01	; 1
    2ea8:	a1 1d       	adc	r26, r1
    2eaa:	b1 1d       	adc	r27, r1
    2eac:	80 93 9f 00 	sts	0x009F, r24
    2eb0:	90 93 a0 00 	sts	0x00A0, r25
    2eb4:	a0 93 a1 00 	sts	0x00A1, r26
    2eb8:	b0 93 a2 00 	sts	0x00A2, r27
		if(TMR0_ISR_VALUE == Local_u8Counter)
    2ebc:	80 91 9f 00 	lds	r24, 0x009F
    2ec0:	90 91 a0 00 	lds	r25, 0x00A0
    2ec4:	a0 91 a1 00 	lds	r26, 0x00A1
    2ec8:	b0 91 a2 00 	lds	r27, 0x00A2
    2ecc:	84 30       	cpi	r24, 0x04	; 4
    2ece:	91 05       	cpc	r25, r1
    2ed0:	a1 05       	cpc	r26, r1
    2ed2:	b1 05       	cpc	r27, r1
    2ed4:	c9 f4       	brne	.+50     	; 0x2f08 <__vector_11+0x9c>
		{
			TCNT0_u8_REG = TMR0_ISR_PRELOAD_VALUE;
    2ed6:	e2 e5       	ldi	r30, 0x52	; 82
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	89 e1       	ldi	r24, 0x19	; 25
    2edc:	80 83       	st	Z, r24
			Local_u8Counter = 0;
    2ede:	10 92 9f 00 	sts	0x009F, r1
    2ee2:	10 92 a0 00 	sts	0x00A0, r1
    2ee6:	10 92 a1 00 	sts	0x00A1, r1
    2eea:	10 92 a2 00 	sts	0x00A2, r1
			if(TMR0_OverFlow != NULL)
    2eee:	80 91 9a 00 	lds	r24, 0x009A
    2ef2:	90 91 9b 00 	lds	r25, 0x009B
    2ef6:	00 97       	sbiw	r24, 0x00	; 0
    2ef8:	39 f0       	breq	.+14     	; 0x2f08 <__vector_11+0x9c>
			{
				TMR0_u8BusyFlag = 0;
    2efa:	10 92 9e 00 	sts	0x009E, r1
				TMR0_OverFlow();
    2efe:	e0 91 9a 00 	lds	r30, 0x009A
    2f02:	f0 91 9b 00 	lds	r31, 0x009B
    2f06:	09 95       	icall
			}
		}
	#endif
}
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	ff 91       	pop	r31
    2f0e:	ef 91       	pop	r30
    2f10:	bf 91       	pop	r27
    2f12:	af 91       	pop	r26
    2f14:	9f 91       	pop	r25
    2f16:	8f 91       	pop	r24
    2f18:	7f 91       	pop	r23
    2f1a:	6f 91       	pop	r22
    2f1c:	5f 91       	pop	r21
    2f1e:	4f 91       	pop	r20
    2f20:	3f 91       	pop	r19
    2f22:	2f 91       	pop	r18
    2f24:	0f 90       	pop	r0
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	0f 90       	pop	r0
    2f2a:	1f 90       	pop	r1
    2f2c:	18 95       	reti

00002f2e <TMR0_voidStop>:


void TMR0_voidStop(void)
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
	//Select TMR0 Clock
	CLEAR_BIT(TCCR0_u8_REG,0);
    2f36:	a3 e5       	ldi	r26, 0x53	; 83
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	e3 e5       	ldi	r30, 0x53	; 83
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	80 81       	ld	r24, Z
    2f40:	8e 7f       	andi	r24, 0xFE	; 254
    2f42:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_u8_REG,1);
    2f44:	a3 e5       	ldi	r26, 0x53	; 83
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e3 e5       	ldi	r30, 0x53	; 83
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	8d 7f       	andi	r24, 0xFD	; 253
    2f50:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_u8_REG,2);
    2f52:	a3 e5       	ldi	r26, 0x53	; 83
    2f54:	b0 e0       	ldi	r27, 0x00	; 0
    2f56:	e3 e5       	ldi	r30, 0x53	; 83
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	80 81       	ld	r24, Z
    2f5c:	8b 7f       	andi	r24, 0xFB	; 251
    2f5e:	8c 93       	st	X, r24
}
    2f60:	cf 91       	pop	r28
    2f62:	df 91       	pop	r29
    2f64:	08 95       	ret

00002f66 <TMR0_voidSetCompareMatch>:

void TMR0_voidSetCompareMatch(u8 Copy_u8CompareMatch)
{
    2f66:	df 93       	push	r29
    2f68:	cf 93       	push	r28
    2f6a:	0f 92       	push	r0
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	89 83       	std	Y+1, r24	; 0x01
	OCR0_u8_REG = Copy_u8CompareMatch;
    2f72:	ec e5       	ldi	r30, 0x5C	; 92
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	80 83       	st	Z, r24
} 
    2f7a:	0f 90       	pop	r0
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	08 95       	ret

00002f82 <TMR1_voidInit>:


void TMR1_voidInit(void)
{
    2f82:	df 93       	push	r29
    2f84:	cf 93       	push	r28
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
		CLEAR_BIT(TCCR1A_u8_REG,0);
		CLEAR_BIT(TCCR1A_u8_REG,1);
		CLEAR_BIT(TCCR1B_u8_REG,3);
		CLEAR_BIT(TCCR1B_u8_REG,4);
	#elif	TMR1_MODE == TMR1_FAST_PWM_MODE
		CLEAR_BIT(TCCR1A_u8_REG,0);
    2f8a:	af e4       	ldi	r26, 0x4F	; 79
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	ef e4       	ldi	r30, 0x4F	; 79
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	8e 7f       	andi	r24, 0xFE	; 254
    2f96:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_u8_REG,1);
    2f98:	af e4       	ldi	r26, 0x4F	; 79
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	ef e4       	ldi	r30, 0x4F	; 79
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	80 81       	ld	r24, Z
    2fa2:	82 60       	ori	r24, 0x02	; 2
    2fa4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_u8_REG,3);
    2fa6:	ae e4       	ldi	r26, 0x4E	; 78
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	ee e4       	ldi	r30, 0x4E	; 78
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	80 81       	ld	r24, Z
    2fb0:	88 60       	ori	r24, 0x08	; 8
    2fb2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_u8_REG,4);
    2fb4:	ae e4       	ldi	r26, 0x4E	; 78
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	ee e4       	ldi	r30, 0x4E	; 78
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	80 61       	ori	r24, 0x10	; 16
    2fc0:	8c 93       	st	X, r24
		#if TMR1_CHANNAL == TMR1_CHANNAL_A
			#if TMR1_PWM_MODE == TMR1_NON_INVERTING
				CLEAR_BIT(TCCR1A_u8_REG,6);
    2fc2:	af e4       	ldi	r26, 0x4F	; 79
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	ef e4       	ldi	r30, 0x4F	; 79
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	80 81       	ld	r24, Z
    2fcc:	8f 7b       	andi	r24, 0xBF	; 191
    2fce:	8c 93       	st	X, r24
				SET_BIT(TCCR1A_u8_REG,7);
    2fd0:	af e4       	ldi	r26, 0x4F	; 79
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	ef e4       	ldi	r30, 0x4F	; 79
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	80 68       	ori	r24, 0x80	; 128
    2fdc:	8c 93       	st	X, r24
				SET_BIT(TCCR1A_u8_REG,5);
			#endif
		#endif
	#endif
	/*Set Prescaler 8*/
	CLEAR_BIT(TCCR1B_u8_REG,0);
    2fde:	ae e4       	ldi	r26, 0x4E	; 78
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	ee e4       	ldi	r30, 0x4E	; 78
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	8e 7f       	andi	r24, 0xFE	; 254
    2fea:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_u8_REG,1);
    2fec:	ae e4       	ldi	r26, 0x4E	; 78
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	ee e4       	ldi	r30, 0x4E	; 78
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	80 81       	ld	r24, Z
    2ff6:	82 60       	ori	r24, 0x02	; 2
    2ff8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_u8_REG,2);
    2ffa:	ae e4       	ldi	r26, 0x4E	; 78
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	ee e4       	ldi	r30, 0x4E	; 78
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	8b 7f       	andi	r24, 0xFB	; 251
    3006:	8c 93       	st	X, r24
}
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <TMR1_voidStopTimer>:

void TMR1_voidStopTimer(void)
{
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B_u8_REG,0);
    3016:	ae e4       	ldi	r26, 0x4E	; 78
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	ee e4       	ldi	r30, 0x4E	; 78
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	8e 7f       	andi	r24, 0xFE	; 254
    3022:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_u8_REG,1);
    3024:	ae e4       	ldi	r26, 0x4E	; 78
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	ee e4       	ldi	r30, 0x4E	; 78
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	8d 7f       	andi	r24, 0xFD	; 253
    3030:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_u8_REG,2);
    3032:	ae e4       	ldi	r26, 0x4E	; 78
    3034:	b0 e0       	ldi	r27, 0x00	; 0
    3036:	ee e4       	ldi	r30, 0x4E	; 78
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	80 81       	ld	r24, Z
    303c:	8b 7f       	andi	r24, 0xFB	; 251
    303e:	8c 93       	st	X, r24
}
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	08 95       	ret

00003046 <TMR1_u16GetCounter>:

u16 TMR1_u16GetCounter(void)
{
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
	return TCNT1LH_u16_REG;
    304e:	ec e4       	ldi	r30, 0x4C	; 76
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	91 81       	ldd	r25, Z+1	; 0x01
}
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	08 95       	ret

0000305c <TMR1_voidSetCompareMatch>:

void TMR1_voidSetCompareMatch(u16 Copy_u8CompareMatch)
{
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	00 d0       	rcall	.+0      	; 0x3062 <TMR1_voidSetCompareMatch+0x6>
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	9a 83       	std	Y+2, r25	; 0x02
    3068:	89 83       	std	Y+1, r24	; 0x01
	#if TMR1_CHANNAL == TMR1_CHANNAL_A
		OCR1ALH_u16_REG = Copy_u8CompareMatch;
    306a:	ea e4       	ldi	r30, 0x4A	; 74
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	9a 81       	ldd	r25, Y+2	; 0x02
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	80 83       	st	Z, r24
	#elif TMR1_CHANNAL == TMR1_CHANNAL_B
		OCR1BLH_u16_REG = Copy_u8CompareMatch;
	#endif
}
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <TMR1_voidSetICR>:

void TMR1_voidSetICR(u16 Copy_u8ICR)
{
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	00 d0       	rcall	.+0      	; 0x3086 <TMR1_voidSetICR+0x6>
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	9a 83       	std	Y+2, r25	; 0x02
    308c:	89 83       	std	Y+1, r24	; 0x01
	ICR1LH_u16_REG = Copy_u8ICR;
    308e:	e6 e4       	ldi	r30, 0x46	; 70
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	9a 81       	ldd	r25, Y+2	; 0x02
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
}
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	cf 91       	pop	r28
    30a0:	df 91       	pop	r29
    30a2:	08 95       	ret

000030a4 <TMR1_voidInitICU>:

void TMR1_voidInitICU(void)
{
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
	/*Noise cancel*/
	SET_BIT(TCCR1B_u8_REG,7);
    30ac:	ae e4       	ldi	r26, 0x4E	; 78
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	ee e4       	ldi	r30, 0x4E	; 78
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	80 68       	ori	r24, 0x80	; 128
    30b8:	8c 93       	st	X, r24
	/*Set Risisng Edge*/
	SET_BIT(TCCR1B_u8_REG,6);
    30ba:	ae e4       	ldi	r26, 0x4E	; 78
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	ee e4       	ldi	r30, 0x4E	; 78
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	80 64       	ori	r24, 0x40	; 64
    30c6:	8c 93       	st	X, r24
	/*PIE*/
	SET_BIT(TIMSK_u8_REG,5);
    30c8:	a9 e5       	ldi	r26, 0x59	; 89
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	e9 e5       	ldi	r30, 0x59	; 89
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	80 62       	ori	r24, 0x20	; 32
    30d4:	8c 93       	st	X, r24
}
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	08 95       	ret

000030dc <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    30dc:	1f 92       	push	r1
    30de:	0f 92       	push	r0
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	0f 92       	push	r0
    30e4:	11 24       	eor	r1, r1
    30e6:	2f 93       	push	r18
    30e8:	3f 93       	push	r19
    30ea:	8f 93       	push	r24
    30ec:	9f 93       	push	r25
    30ee:	af 93       	push	r26
    30f0:	bf 93       	push	r27
    30f2:	ef 93       	push	r30
    30f4:	ff 93       	push	r31
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	00 d0       	rcall	.+0      	; 0x30fc <__vector_6+0x20>
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16CounterValue = ICR1LH_u16_REG;
    3100:	e6 e4       	ldi	r30, 0x46	; 70
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	91 81       	ldd	r25, Z+1	; 0x01
    3108:	9a 83       	std	Y+2, r25	; 0x02
    310a:	89 83       	std	Y+1, r24	; 0x01
	static u16 Local_u16OldCounterValue = 0;
	static u8 Local_u8Flag = 0;
	if(Local_u8Flag == 0)
    310c:	80 91 a3 00 	lds	r24, 0x00A3
    3110:	88 23       	and	r24, r24
    3112:	b1 f4       	brne	.+44     	; 0x3140 <__vector_6+0x64>
	{
		/*Set Falling Edge*/
		CLEAR_BIT(TCCR1B_u8_REG,6);
    3114:	ae e4       	ldi	r26, 0x4E	; 78
    3116:	b0 e0       	ldi	r27, 0x00	; 0
    3118:	ee e4       	ldi	r30, 0x4E	; 78
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	80 81       	ld	r24, Z
    311e:	8f 7b       	andi	r24, 0xBF	; 191
    3120:	8c 93       	st	X, r24
		Local_u8Flag = 1;
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	80 93 a3 00 	sts	0x00A3, r24
		ICU_u16OFF = Local_u16CounterValue - Local_u16OldCounterValue;
    3128:	20 91 a4 00 	lds	r18, 0x00A4
    312c:	30 91 a5 00 	lds	r19, 0x00A5
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	9a 81       	ldd	r25, Y+2	; 0x02
    3134:	82 1b       	sub	r24, r18
    3136:	93 0b       	sbc	r25, r19
    3138:	90 93 a7 00 	sts	0x00A7, r25
    313c:	80 93 a6 00 	sts	0x00A6, r24
	}
	if(Local_u8Flag == 1)
    3140:	80 91 a3 00 	lds	r24, 0x00A3
    3144:	81 30       	cpi	r24, 0x01	; 1
    3146:	a9 f4       	brne	.+42     	; 0x3172 <__vector_6+0x96>
	{
		/*Set Falling Edge*/
		SET_BIT(TCCR1B_u8_REG,6);
    3148:	ae e4       	ldi	r26, 0x4E	; 78
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	ee e4       	ldi	r30, 0x4E	; 78
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	80 64       	ori	r24, 0x40	; 64
    3154:	8c 93       	st	X, r24
		Local_u8Flag = 0;
    3156:	10 92 a3 00 	sts	0x00A3, r1
		ICU_u16ON = Local_u16CounterValue - Local_u16OldCounterValue;
    315a:	20 91 a4 00 	lds	r18, 0x00A4
    315e:	30 91 a5 00 	lds	r19, 0x00A5
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	9a 81       	ldd	r25, Y+2	; 0x02
    3166:	82 1b       	sub	r24, r18
    3168:	93 0b       	sbc	r25, r19
    316a:	90 93 a9 00 	sts	0x00A9, r25
    316e:	80 93 a8 00 	sts	0x00A8, r24
	}
	Local_u16OldCounterValue = Local_u16CounterValue;
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	90 93 a5 00 	sts	0x00A5, r25
    317a:	80 93 a4 00 	sts	0x00A4, r24
}
    317e:	0f 90       	pop	r0
    3180:	0f 90       	pop	r0
    3182:	cf 91       	pop	r28
    3184:	df 91       	pop	r29
    3186:	ff 91       	pop	r31
    3188:	ef 91       	pop	r30
    318a:	bf 91       	pop	r27
    318c:	af 91       	pop	r26
    318e:	9f 91       	pop	r25
    3190:	8f 91       	pop	r24
    3192:	3f 91       	pop	r19
    3194:	2f 91       	pop	r18
    3196:	0f 90       	pop	r0
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	0f 90       	pop	r0
    319c:	1f 90       	pop	r1
    319e:	18 95       	reti

000031a0 <ICU_voidTotalPeriod>:

u32 ICU_voidTotalPeriod(void)
{
    31a0:	df 93       	push	r29
    31a2:	cf 93       	push	r28
    31a4:	00 d0       	rcall	.+0      	; 0x31a6 <ICU_voidTotalPeriod+0x6>
    31a6:	00 d0       	rcall	.+0      	; 0x31a8 <ICU_voidTotalPeriod+0x8>
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
	u32 Local_u32TotalPeriod = ICU_u16OFF + ICU_u16ON;
    31ac:	20 91 a6 00 	lds	r18, 0x00A6
    31b0:	30 91 a7 00 	lds	r19, 0x00A7
    31b4:	80 91 a8 00 	lds	r24, 0x00A8
    31b8:	90 91 a9 00 	lds	r25, 0x00A9
    31bc:	82 0f       	add	r24, r18
    31be:	93 1f       	adc	r25, r19
    31c0:	cc 01       	movw	r24, r24
    31c2:	a0 e0       	ldi	r26, 0x00	; 0
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	89 83       	std	Y+1, r24	; 0x01
    31c8:	9a 83       	std	Y+2, r25	; 0x02
    31ca:	ab 83       	std	Y+3, r26	; 0x03
    31cc:	bc 83       	std	Y+4, r27	; 0x04
	return Local_u32TotalPeriod;
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	9a 81       	ldd	r25, Y+2	; 0x02
    31d2:	ab 81       	ldd	r26, Y+3	; 0x03
    31d4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    31d6:	bc 01       	movw	r22, r24
    31d8:	cd 01       	movw	r24, r26
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	cf 91       	pop	r28
    31e4:	df 91       	pop	r29
    31e6:	08 95       	ret

000031e8 <ICU_u8DutyCycle>:

u8 ICU_u8DutyCycle(void)
{
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <ICU_u8DutyCycle+0x6>
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <ICU_u8DutyCycle+0x8>
    31f0:	0f 92       	push	r0
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
	u32 Local_u32TotalPeriod = ICU_voidTotalPeriod();
    31f6:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <ICU_voidTotalPeriod>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	8a 83       	std	Y+2, r24	; 0x02
    3200:	9b 83       	std	Y+3, r25	; 0x03
    3202:	ac 83       	std	Y+4, r26	; 0x04
    3204:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u8DutyCycle = (u8)((u32)(ICU_u16ON*100UL)/(u32)Local_u32TotalPeriod);
    3206:	80 91 a8 00 	lds	r24, 0x00A8
    320a:	90 91 a9 00 	lds	r25, 0x00A9
    320e:	cc 01       	movw	r24, r24
    3210:	a0 e0       	ldi	r26, 0x00	; 0
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	24 e6       	ldi	r18, 0x64	; 100
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	40 e0       	ldi	r20, 0x00	; 0
    321a:	50 e0       	ldi	r21, 0x00	; 0
    321c:	bc 01       	movw	r22, r24
    321e:	cd 01       	movw	r24, r26
    3220:	0e 94 28 19 	call	0x3250	; 0x3250 <__mulsi3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	2a 81       	ldd	r18, Y+2	; 0x02
    322a:	3b 81       	ldd	r19, Y+3	; 0x03
    322c:	4c 81       	ldd	r20, Y+4	; 0x04
    322e:	5d 81       	ldd	r21, Y+5	; 0x05
    3230:	bc 01       	movw	r22, r24
    3232:	cd 01       	movw	r24, r26
    3234:	0e 94 6e 19 	call	0x32dc	; 0x32dc <__udivmodsi4>
    3238:	da 01       	movw	r26, r20
    323a:	c9 01       	movw	r24, r18
    323c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8DutyCycle;
    323e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	0f 90       	pop	r0
    3248:	0f 90       	pop	r0
    324a:	cf 91       	pop	r28
    324c:	df 91       	pop	r29
    324e:	08 95       	ret

00003250 <__mulsi3>:
    3250:	62 9f       	mul	r22, r18
    3252:	d0 01       	movw	r26, r0
    3254:	73 9f       	mul	r23, r19
    3256:	f0 01       	movw	r30, r0
    3258:	82 9f       	mul	r24, r18
    325a:	e0 0d       	add	r30, r0
    325c:	f1 1d       	adc	r31, r1
    325e:	64 9f       	mul	r22, r20
    3260:	e0 0d       	add	r30, r0
    3262:	f1 1d       	adc	r31, r1
    3264:	92 9f       	mul	r25, r18
    3266:	f0 0d       	add	r31, r0
    3268:	83 9f       	mul	r24, r19
    326a:	f0 0d       	add	r31, r0
    326c:	74 9f       	mul	r23, r20
    326e:	f0 0d       	add	r31, r0
    3270:	65 9f       	mul	r22, r21
    3272:	f0 0d       	add	r31, r0
    3274:	99 27       	eor	r25, r25
    3276:	72 9f       	mul	r23, r18
    3278:	b0 0d       	add	r27, r0
    327a:	e1 1d       	adc	r30, r1
    327c:	f9 1f       	adc	r31, r25
    327e:	63 9f       	mul	r22, r19
    3280:	b0 0d       	add	r27, r0
    3282:	e1 1d       	adc	r30, r1
    3284:	f9 1f       	adc	r31, r25
    3286:	bd 01       	movw	r22, r26
    3288:	cf 01       	movw	r24, r30
    328a:	11 24       	eor	r1, r1
    328c:	08 95       	ret

0000328e <__udivmodhi4>:
    328e:	aa 1b       	sub	r26, r26
    3290:	bb 1b       	sub	r27, r27
    3292:	51 e1       	ldi	r21, 0x11	; 17
    3294:	07 c0       	rjmp	.+14     	; 0x32a4 <__udivmodhi4_ep>

00003296 <__udivmodhi4_loop>:
    3296:	aa 1f       	adc	r26, r26
    3298:	bb 1f       	adc	r27, r27
    329a:	a6 17       	cp	r26, r22
    329c:	b7 07       	cpc	r27, r23
    329e:	10 f0       	brcs	.+4      	; 0x32a4 <__udivmodhi4_ep>
    32a0:	a6 1b       	sub	r26, r22
    32a2:	b7 0b       	sbc	r27, r23

000032a4 <__udivmodhi4_ep>:
    32a4:	88 1f       	adc	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	5a 95       	dec	r21
    32aa:	a9 f7       	brne	.-22     	; 0x3296 <__udivmodhi4_loop>
    32ac:	80 95       	com	r24
    32ae:	90 95       	com	r25
    32b0:	bc 01       	movw	r22, r24
    32b2:	cd 01       	movw	r24, r26
    32b4:	08 95       	ret

000032b6 <__divmodhi4>:
    32b6:	97 fb       	bst	r25, 7
    32b8:	09 2e       	mov	r0, r25
    32ba:	07 26       	eor	r0, r23
    32bc:	0a d0       	rcall	.+20     	; 0x32d2 <__divmodhi4_neg1>
    32be:	77 fd       	sbrc	r23, 7
    32c0:	04 d0       	rcall	.+8      	; 0x32ca <__divmodhi4_neg2>
    32c2:	e5 df       	rcall	.-54     	; 0x328e <__udivmodhi4>
    32c4:	06 d0       	rcall	.+12     	; 0x32d2 <__divmodhi4_neg1>
    32c6:	00 20       	and	r0, r0
    32c8:	1a f4       	brpl	.+6      	; 0x32d0 <__divmodhi4_exit>

000032ca <__divmodhi4_neg2>:
    32ca:	70 95       	com	r23
    32cc:	61 95       	neg	r22
    32ce:	7f 4f       	sbci	r23, 0xFF	; 255

000032d0 <__divmodhi4_exit>:
    32d0:	08 95       	ret

000032d2 <__divmodhi4_neg1>:
    32d2:	f6 f7       	brtc	.-4      	; 0x32d0 <__divmodhi4_exit>
    32d4:	90 95       	com	r25
    32d6:	81 95       	neg	r24
    32d8:	9f 4f       	sbci	r25, 0xFF	; 255
    32da:	08 95       	ret

000032dc <__udivmodsi4>:
    32dc:	a1 e2       	ldi	r26, 0x21	; 33
    32de:	1a 2e       	mov	r1, r26
    32e0:	aa 1b       	sub	r26, r26
    32e2:	bb 1b       	sub	r27, r27
    32e4:	fd 01       	movw	r30, r26
    32e6:	0d c0       	rjmp	.+26     	; 0x3302 <__udivmodsi4_ep>

000032e8 <__udivmodsi4_loop>:
    32e8:	aa 1f       	adc	r26, r26
    32ea:	bb 1f       	adc	r27, r27
    32ec:	ee 1f       	adc	r30, r30
    32ee:	ff 1f       	adc	r31, r31
    32f0:	a2 17       	cp	r26, r18
    32f2:	b3 07       	cpc	r27, r19
    32f4:	e4 07       	cpc	r30, r20
    32f6:	f5 07       	cpc	r31, r21
    32f8:	20 f0       	brcs	.+8      	; 0x3302 <__udivmodsi4_ep>
    32fa:	a2 1b       	sub	r26, r18
    32fc:	b3 0b       	sbc	r27, r19
    32fe:	e4 0b       	sbc	r30, r20
    3300:	f5 0b       	sbc	r31, r21

00003302 <__udivmodsi4_ep>:
    3302:	66 1f       	adc	r22, r22
    3304:	77 1f       	adc	r23, r23
    3306:	88 1f       	adc	r24, r24
    3308:	99 1f       	adc	r25, r25
    330a:	1a 94       	dec	r1
    330c:	69 f7       	brne	.-38     	; 0x32e8 <__udivmodsi4_loop>
    330e:	60 95       	com	r22
    3310:	70 95       	com	r23
    3312:	80 95       	com	r24
    3314:	90 95       	com	r25
    3316:	9b 01       	movw	r18, r22
    3318:	ac 01       	movw	r20, r24
    331a:	bd 01       	movw	r22, r26
    331c:	cf 01       	movw	r24, r30
    331e:	08 95       	ret

00003320 <__prologue_saves__>:
    3320:	2f 92       	push	r2
    3322:	3f 92       	push	r3
    3324:	4f 92       	push	r4
    3326:	5f 92       	push	r5
    3328:	6f 92       	push	r6
    332a:	7f 92       	push	r7
    332c:	8f 92       	push	r8
    332e:	9f 92       	push	r9
    3330:	af 92       	push	r10
    3332:	bf 92       	push	r11
    3334:	cf 92       	push	r12
    3336:	df 92       	push	r13
    3338:	ef 92       	push	r14
    333a:	ff 92       	push	r15
    333c:	0f 93       	push	r16
    333e:	1f 93       	push	r17
    3340:	cf 93       	push	r28
    3342:	df 93       	push	r29
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	ca 1b       	sub	r28, r26
    334a:	db 0b       	sbc	r29, r27
    334c:	0f b6       	in	r0, 0x3f	; 63
    334e:	f8 94       	cli
    3350:	de bf       	out	0x3e, r29	; 62
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	cd bf       	out	0x3d, r28	; 61
    3356:	09 94       	ijmp

00003358 <__epilogue_restores__>:
    3358:	2a 88       	ldd	r2, Y+18	; 0x12
    335a:	39 88       	ldd	r3, Y+17	; 0x11
    335c:	48 88       	ldd	r4, Y+16	; 0x10
    335e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3360:	6e 84       	ldd	r6, Y+14	; 0x0e
    3362:	7d 84       	ldd	r7, Y+13	; 0x0d
    3364:	8c 84       	ldd	r8, Y+12	; 0x0c
    3366:	9b 84       	ldd	r9, Y+11	; 0x0b
    3368:	aa 84       	ldd	r10, Y+10	; 0x0a
    336a:	b9 84       	ldd	r11, Y+9	; 0x09
    336c:	c8 84       	ldd	r12, Y+8	; 0x08
    336e:	df 80       	ldd	r13, Y+7	; 0x07
    3370:	ee 80       	ldd	r14, Y+6	; 0x06
    3372:	fd 80       	ldd	r15, Y+5	; 0x05
    3374:	0c 81       	ldd	r16, Y+4	; 0x04
    3376:	1b 81       	ldd	r17, Y+3	; 0x03
    3378:	aa 81       	ldd	r26, Y+2	; 0x02
    337a:	b9 81       	ldd	r27, Y+1	; 0x01
    337c:	ce 0f       	add	r28, r30
    337e:	d1 1d       	adc	r29, r1
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	ed 01       	movw	r28, r26
    338c:	08 95       	ret

0000338e <strlen>:
    338e:	fc 01       	movw	r30, r24
    3390:	01 90       	ld	r0, Z+
    3392:	00 20       	and	r0, r0
    3394:	e9 f7       	brne	.-6      	; 0x3390 <strlen+0x2>
    3396:	80 95       	com	r24
    3398:	90 95       	com	r25
    339a:	8e 0f       	add	r24, r30
    339c:	9f 1f       	adc	r25, r31
    339e:	08 95       	ret

000033a0 <_exit>:
    33a0:	f8 94       	cli

000033a2 <__stop_program>:
    33a2:	ff cf       	rjmp	.-2      	; 0x33a2 <__stop_program>
